<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS学习笔记Part05</title>
      <link href="/2022/03/24/qian-duan-xue-xi/css/css-xue-xi-bi-ji-05/"/>
      <url>/2022/03/24/qian-duan-xue-xi/css/css-xue-xi-bi-ji-05/</url>
      
        <content type="html"><![CDATA[<h1>CSS学习笔记 Part05</h1><p><strong>目录</strong><br><a href="#title01">1. 定位</a><br><a href="#title02">2. 综合案例</a><br><a href="#title03">3. 网页布局总结</a><br><a href="#title04">4. 元素的显示与隐藏</a></p><span id="more"></span><style>    .red {        /* color: red; */        font-weight: 700;    }</style><h2 id="title01">1. 定位</h2><h3>1.1 为什么需要定位</h3><ol><li>某个元素可以自由地在一个盒子内移动位置，并且压住其他盒子</li><li>当滚动窗口时，盒子是固定在屏幕某个位置的</li></ol><p>以上效果，标准流或浮动都无法快速实现，此时需要<span class="red">定位</span>来实现</p><p>所以：</p><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</li><li>定位则是可以让盒子自由地在某个盒子内移动位置或者固定品目中某个位置，并且可以压住其他盒子</li></ol><h3>1.2 定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子</p><p>定位=定位模式+边偏移</p><p>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</p><h4>1.2.1 定位模式</h4><p>定位模式决定怨怒是的定位方式，通过CSS的position属性来设置，有四个值</p><table>    <thead>        <tr>            <th>值</th>            <th>语义</th>        </tr>    </thead>    <tbody>        <tr><td>static</td><td>静态定位</td></tr>        <tr><td>relative</td><td>相对定位</td></tr>        <tr><td>absolute</td><td>绝对定位</td></tr>        <tr><td>fixed</td><td>固定定位</td></tr>    </tbody><tbody></tbody></table><h4>1.2.2 边偏移</h4><p>边偏移就是定位的盒子移动到最终位置。有top、bottom、left、right四个属性</p><table>    <thead>        <tr>            <th>边偏移属性</th>            <th>示例</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>top</td>            <td>top: 80px</td>            <td>顶部偏移量，定义元素相对于其父元素上边线的距离</td>        </tr>        <tr>            <td>bottom</td>            <td>bottom: 80px</td>            <td>底部偏移量，定义元素相对于其父元素下边线的距离</td>        </tr>        <tr>            <td>left</td>            <td>left: 80px</td>            <td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>        </tr>        <tr>            <td>right</td>            <td>right: 80px</td>            <td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>        </tr>    </tbody><tbody></tbody></table><h3>1.3 静态定位</h3><p>静态定位是元素的默认定位方式，无定位的意思</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { position: static; }</code></pre><ul><li>静态定位按照标准流特性拜访位置，没有边偏移</li><li>静态定位在布局时很少用到</li></ul><h3>1.4 相对定位</h3><p><strong class="red">相对定位</strong>是元素移动位置的时候，是相对于它<span class="red">原来的位置</span>来说的</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { position: relative; }</code></pre><p>相对定位的特点：</p><ol><li>它是相对于自己原来的位置来移动的（<span class="red">移动位置的时候参照点是自己原来的位置</span>）</li><li>原来在标注流的位置继续占有，后面的盒子仍然以标注流的方式对待它。（<span class="red">不脱标，继续保留原来位置</span>）</li></ol><h3>1.4 相对定位</h3><p><strong class="red">绝对定位</strong>是元素移动位置的时候，是相对于它<span class="red">祖先元素</span>来说的</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { position: absolute; }</code></pre><p>相对定位的特点：</p><ol><li>如果<span class="red">没有祖先元素</span>或者<span class="red">祖先元素没有定位</span>，则以浏览器为准定位（Document文档）</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级有定位的祖先元素为参考点移动位置</li><li>绝对定位<span class="red">不再占有原先的位置</span>（脱标）</li></ol><h3>1.5 子绝父相的由来</h3><p>子绝父相：子级是绝对定位的话，父亲要用相对定位</p><ol><li>子级绝对定位，不会占有位置，可以放到父级盒子里面的任何一个地方，不会影响其他的兄弟盒子</li><li>父级盒子需要加定位限制子盒子在父级盒子内显示</li><li>父级盒子布局时，需要占有位置，因此父级只能时相对定位</li></ol><h3>1.6 案例：学成在线-hot new 模块添加</h3>略<h3>1.7 固定定位</h3><p><strong class="red">固定定位</strong>是元素<span class="red">固定于浏览器可视区的位置</span>。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { position: fixed; }</code></pre><p>固定定位的特点：</p><ol><li>以浏览器的可视窗口为参照点移动元素<ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li>固定定位<span class="red">不再占有原先的位置</span>（脱标）</li></ol><p>固定定位小技巧：固定在版心右侧位置</p><ol><li>让固定定位的盒子 left: 50%;走到浏览器可视区（版心）的一半位置</li><li>让固定定位的盒子 margin-left: 版心宽度的一半距离，多走版心宽度的一半位置</li></ol><h3>1.8 粘性定位</h3><p><strong class="red">粘性定位</strong>可以被认为是相对定位和固定定位的混合。跟页面滚动搭配使用，兼容性较差。IE不支持</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { position: sticky; }</code></pre><p>粘性定位的特点：</p><ol><li>以浏览器的可视窗口为参照移动元素（固定定位的特点）</li><li>粘性定位占有原先的位置（相对定位的特点）</li><li>必须添加top、left、right、bottom其中一个才有效</li></ol><h3>1.9 定位总结</h3><table>    <thead>        <tr>            <th>定位模式</th>            <th>是否脱标</th>            <th>移动位置</th>            <th>是否常用</th>        </tr>    </thead>    <tbody>        <tr>            <td>static静态定位</td>            <td>否</td>            <td>不能使用边偏移</td>            <td>很少</td>        </tr>        <tr>            <td>relative相对定位</td>            <td>否（占有位置）</td>            <td>相对于自身位置移动</td>            <td>常用</td>        </tr>        <tr>            <td>absolute绝对定位</td>            <td>是（不占有位置）</td>            <td>带有定位的父级</td>            <td>常用</td>        </tr>        <tr>            <td>fixed固定定位</td>            <td>是（不占有位置）</td>            <td>浏览器可视区</td>            <td>常用</td>        </tr>        <tr>            <td>sticky粘性定位</td>            <td>否（占有位置）</td>            <td>浏览器可视区</td>            <td>目前阶段少</td>        </tr>    </tbody></table><h3>1.10 定位叠放次序</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用<span class="red">z-index</span>来控制盒子的前后次序（z轴）</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { z-index: 1; }</code></pre><p>注意：</p><ol><li>数值可以是正整数、负整数、0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才用z-index属性</li></ol><h3>1.11 定位的拓展</h3><h4>1. 绝对定位的盒子居中</h4><p>加了绝对定位的盒子不能通过<span class="red">margin: 0 auto;</span>水平居中，但是可以通过以下计算方法实现水平和垂直居中：</p><ol><li>left: 50%; ：让盒子的左侧移动到父级元组的水平中心位置</li><li>margin-left: -100px; 让盒子向左移动自身宽度的一半</li></ol><p>注意：相对定位的盒子可以使用<span class="red">margin: 0 auto;</span>水平居中</p><h4>2. 定位特殊特性</h4><p>绝对定位和固定定位也和浮动类似：（类似行内块元素）</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li></ol><h4>3. 脱标的盒子不会触发外边距塌陷</h4><p>浮动元素、绝对定位、固定定位的元素都不会出发外边距合并的问题</p><h4>4. 绝对定位/固定定位会完全压住盒子</h4><p>浮动元素不同，只会压住它下面标准流的盒子，但不会压住下面标准流盒子里面的文字/图片</p><p>但是绝对定位/固定定位会压住下面标准流盒子的所有内容</p><p>浮动定位之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。文字会围绕浮动元素</p><h2 id="title02">2. 综合案例：淘宝焦点图布局</h2><h3>2.1 布局制作流程</h3><ol><li>大盒子类名：tb-promo 淘宝推广</li><li>里面先放一张图片</li><li>左右两个按钮使用链接。左箭头prev，右箭头next</li><li>底侧小圆点使用ul制作，类名：promo-nav</li></ol><p>注意：如果一个盒子既有left属性也有right属性，默认执行left，同理，对top默认。</p><h3>2.2 案例代码</h3><p>案例代码如下：</p><pre class=" language-language-html"><code class="language-language-html"><style>    * {        margin: 0;        padding: 0;    }    li {        list-style: none;    }    .tb-promo {        position: relative;        width: 520px;        height: 280px;        background-color: pink;        margin: 100px auto;    }    .tb-promo img {        width: 520px;        height: 280px;    }    .prev,    .next {        position: absolute;        top: 50%;        margin-top: -15px;        width: 20px;        height: 30px;        background-color: rgba(0, 0, 0, 0.3);        text-align: center;        line-height: 26px;        text-decoration: none;        color: #fff;    }    .prev {        left: 0;        border-top-right-radius: 15px;        border-bottom-right-radius: 15px;    }    .next {        right: 0;        border-top-left-radius: 15px;        border-bottom-left-radius: 15px;    }    .promo-nav {        position: absolute;        bottom: 15px;        left: 50%;        margin-left: -35px;        width: 70px;        height: 13px;        background-color: rgba(255, 255, 255, 0.5);        border-radius: 7px;    }    .promo-nav li {        float: left;        margin: 3px;        width: 8px;        height: 8px;        background-color: #fff;        border-radius: 50%;    }    .promo-nav li:hover {        cursor: pointer;    }    .promo-nav .selected {        background-color: #ff5000;    }</style><body>    <div class="tb-promo">        <img src="images/01.jpg" alt="">        <a href="#" class="prev">&lt;</a>        <a href="#" class="next">&gt;</a>        <ul class="promo-nav">            <li class="selected"></li>            <li></li>            <li></li>            <li></li>            <li></li>        </ul>    </div></body></code></pre><h2 id="title03">3. 网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是盒子</p><p>通过CSS浮动、定位可以让每个盒子排列成网页</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法</p><ol><li>标准流<br>可以让盒子上下排列或者左右排列，<span class="red">垂直的块级盒子显示就用标注流布局</span></li><li>浮动<br>可以让多个块级元素一行显示或者左右对齐盒子，<span class="red">多个块级盒子水平显示就用浮动布局</span></li><li>定位<br>定位最大的特点就是有层叠的概念，就是可以让多个盒子前后叠压来显示。<span class="red">如果元素自由在某个盒子内移动就用定位布局</span></li></ol><h2 id="title04">4. 元素的显示与隐藏</h2><p>类似网站广告，当点击关闭不见了，但是重新刷新页面，会重新出现<br>本质：<span class="red">让一个元素在页面中隐藏或者显示出来</span></p><h3>4.1 display属性</h3><p>display属性用于设置一个元素应该如何显示</p><ul><li>display: none; 隐藏对象</li><li>display: block; 除了转换为块级元素，同时还有显示元素的意思</li></ul><p><span class="red">display隐藏元素后，不再占有原来的位置</span><br>后面应用极其广泛，搭配JS可以做很多网页特效</p><h3>4.2 visibility属性</h3><p><span class="red">visibility属性用于指定一个元素应可见还是隐藏</span></p><ul><li>visibility: visible; 元素可见</li><li>visibility: hidden; 元素隐藏</li></ul><p><span class="red">visibility隐藏元素后，继续占有原来的位置</span></p><p>如果隐藏元素想要原来位置，就用visibility: hidden;<br>如果隐藏元素不想要原来位置，就用display: none;（用处更多，重点）</p><h3>4.3 overflow溢出</h3><p><span class="red">overflow属性</span>指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么</p><table>    <thead>        <tr>            <th>属性值</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>visible</td>            <td>不剪切内容也不添加滚动条</td>        </tr>        <tr>            <td>hidden</td>            <td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>        </tr>        <tr>            <td>scroll</td>            <td>不管超出内容与否，总是显示滚动条</td>        </tr>        <tr>            <td>auto</td>            <td>超出自动显示滚动条，不超出不显示滚动条</td>        </tr>    </tbody></table><p>一般情况下，不想让溢出的内容显示出来，因为溢出的部分会影响布局</p><p>但是如果有定位的盒子，请慎用overflow: hidden;因为它会隐藏多余的部分</p><h3>案例：土豆网鼠标经过显示遮罩</h3><p>案例代码如下：</p><pre class=" language-language-html"><code class="language-language-html"><style>    * {        margin: 0;        padding: 0;    }    .tudou {        position: relative;        width: 444px;        height: 320px;        background-color: pink;        margin: 30px auto;    }    .tudou img {        width: 100%;        height: 100%;    }    .mask {        display: none;        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;        /* background: rgba(0, 0, 0, 0.4) url("images/03.png") no-repeat center; */        background: rgba(0, 0, 0, 0.4);    }    .tudou:hover .mask {        display: block;    }</style><body>    <div class="tudou">        <div class="mask"></div>        <img src="images/02.jfif" alt="">    </div></body></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记Part01</title>
      <link href="/2022/03/16/qian-duan-xue-xi/javascript/js-xue-xi-bi-ji-part01/"/>
      <url>/2022/03/16/qian-duan-xue-xi/javascript/js-xue-xi-bi-ji-part01/</url>
      
        <content type="html"><![CDATA[<h1>JavaScript学习笔记 Part01</h1><p><strong>目录</strong><br><a href="#title01">1. DOM简介</a><br><a href="#title02">2. 获取元素</a><br><a href="#title03">3. 事件基础</a><br><a href="#title04">4. 操作元素</a><br><a href="#title05">5. 节点操作</a></p><span id="more"></span><style>    .red {        /* color: red; */        font-weight: 700;    }</style><h2 id="title01">1. DOM简介</h2><h3>1.1 什么是DOM</h3><p><span class="red">文档对象模型（Document Object Model，简称DOM）</span>，是W3C组织推荐的处理可拓展标记语言（HTML或者XML）的标准编程接口</p><p>W3C已经定义了一系列的DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式</p><h3>1.2 DOM树</h3><p><strong>文档：</strong>一个页面就是一个文档，DOM中使用document表示</p><p><strong>元素：</strong>页面中所有的标签都是元素，DOM中使用element表示</p><p><strong>节点：</strong>网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</p><p>DOM把以上内容都看作是对象</p><h2 id="title02">2. 获取元素</h2><h3>2.1 如何获取页面元素</h3><p>DOM在我们实际开发中主要用来操作文素</p><p>获取页面中的元素的方式：</p><ul><li>根据ID获取</li><li>根据标签名获取</li><li>通过HTML5新增的方法获取</li><li>特殊元素获取</li></ul><h3>2.2 根据ID获取</h3><p>使用getElementById()方法可以获取带有ID的元素对象</p><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">var element = document.getElementById(id);</code></pre><h3>2.3 根据标签名获取</h3><p>使用getElementByTagName()方法可以返回带有指定标签名的<span class="red">对象的集合</span></p><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">var elements = document.getElementsByTagName('id名');</code></pre><p>还可以获取某个元素（父元素）内部所有指定标签名的子元素</p><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">element.getElementsByTagName('标签名');</code></pre><p>注意：</p><ol><li>因为得到的是一个对象的集合，所以想要操作里面的元素需要遍历</li><li>得到元素对象是动态的</li><li>父元素必须是<span class="red">单个对象（必须指明是哪一个元素对象）</span>。获取的时候不包括父元素自己</li></ol><h3>2.4 通过HTML5新增的方法获取</h3><ol><li>通过类名获取元素，返回元素集合</li></ol><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">document.getElementsByClassName('类名');</code></pre><ol start="2"><li>根据指定选择器返回<span class="red">第一个元素对象</span></li></ol><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">document.querySelector('选择器');</code></pre><ol start="3"><li>根据指定选择器返回所有元素对象的集合</li></ol><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">document.querySelectorAll('选择器');</code></pre><h3>2.5 获取特殊元素（body、html）</h3><ol><li>获取body元素</li></ol><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">var bodyEle = document.body;</code></pre><ol start="2"><li>获取html元素</li></ol><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">var htmlEle = document.documentElement;</code></pre><h2 id="title03">3. 事件基础</h2><h3>3.1 事件概述</h3><p>JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为</p><p>简单理解：触发——相应机制</p><p>网页中的每个元素都可以产生某些可以触发JavaScript的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作</p><h3>3.2 事件三要素</h3><ol><li>事件源：事件被触发的对象</li><li>事件类型：如何触发事件，如：鼠标点击、鼠标经过、键盘按下</li><li>事件处理程序：通过函数赋值的方式完成</li></ol><p>示例代码如下：</p><pre class=" language-language-html"><code class="language-language-html"><body>    <button id="btn">唐伯虎</button>    <script>        var btn = document.getElementById('btn');        btn.onclick = function () {            alert('点秋香');        }    </script></body></code></pre><p>显示效果如下：</p>    <button id="btn">唐伯虎</button>    <script>        var btn = document.getElementById('btn');        btn.onclick = function () {            alert('点秋香');        }    </script><h3>3.3 执行事件的步骤</h3><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采取函数赋值形式）</li></ol><p>常见的鼠标事件：</p><table>    <tbody><tr><th>鼠标事件</th><th>触发条件</th></tr>    <tr><td>onclick</td><td>鼠标点击左键触发</td></tr>    <tr><td>onmouseover</td><td>鼠标经过触发</td></tr>    <tr><td>onmouseout</td><td>鼠标离开触发</td></tr>    <tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr>    <tr><td>onblur</td><td>失去鼠标焦点触发</td></tr>    <tr><td>onmousemove</td><td>鼠标移动触发</td></tr>    <tr><td>onmouseup</td><td>鼠标弹起触发</td></tr>    <tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="title04">4. 操作元素</h2><p>JavaScript的DOM操作可以改变网页内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。注意以下都是属性</p><h3>4.1 改变元素内容</h3><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">element.innerText</code></pre><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉</p><p>语法：</p><pre class=" language-language-js"><code class="language-language-js">element.innerHTML //常用，标准语法</code></pre><p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p><p>示例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .exampleOf4-1 > div, .exampleOf4-1 > p {        width: 300px;        height: 30px;        line-height: 30px;        margin-top: 10px;        color: #fff;        background-color: pink    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="exampleOf4-1">        <button class="btnOf4-1">显示当前系统事件</button>        <div class="divOf4-1">某个时间</div>        <p class="pOf4-1">123</p>    </div>    <script>        function getDate() {            var date=new Date();            var year=date.getFullYear();            var month=date.getMonth()+1;            var dates=date.getDate();            var arr=['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];            var day=date.getDay();            return '今天是'+year+'年'+month+'月'+dates+'日'+'，'+arr[day];        }        var btn=document.querySelector('.btnOf4-1');        var div=document.querySelector('.divOf4-1');        btn.onclick = function() {            div.innerText = getDate();        }        var p=document.querySelector('.pOf4-1');        p.innerText=getDate();    </script></body></code></pre><p>显示效果如下：</p><style>    .exampleOf4-1 > div, .exampleOf4-1 > p {        width: 300px;        height: 30px;        line-height: 30px;        margin-top: 10px;        color: #fff;        background-color: pink    }</style>    <div class="exampleOf4-1">        <button class="btnOf4-1">显示当前系统事件</button>        <div class="divOf4-1">某个时间</div>        <p class="pOf4-1">123</p>    </div>    <script>        function getDate() {            var date=new Date();            var year=date.getFullYear();            var month=date.getMonth()+1;            var dates=date.getDate();            var arr=['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];            var day=date.getDay();            return '今天是'+year+'年'+month+'月'+dates+'日'+'，'+arr[day];        }        var btn=document.querySelector('.btnOf4-1');        var div=document.querySelector('.divOf4-1');        btn.onclick = function() {            div.innerText = getDate();        }        var p=document.querySelector('.pOf4-1');        p.innerText=getDate();    </script><h3>4.2 常用元素的属性操作</h3><ol><li>innerText、innterHTML改变元素内容</li><li>src、href</li><li>id、alt、title</li></ol><p>示例代码如下：</p><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="exampleOf4-2">        <button id="btn1OfExample4-2">刘德华</button>        <button id="btn2OfExample4-2">张学友</button>        <br>        <img src="JS学习Part01/01.jpg" alt="刘德华" id="imgOfExample4-2" title="刘德华" style="width: 400px;">    </div>    <script>        //1. 获取元素        var btn1=document.getElementById('btn1OfExample4-2');        var btn2=document.getElementById('btn2OfExample4-2');        var img=document.getElementById('imgOfExample4-2');        //2. 注册事件        btn1.onclick = function() {            img.src='JS学习Part01/01.jpg';            img.alt='刘德华';            img.title='刘德华';        }        btn2.onclick = function() {            img.src='JS学习Part01/02.png';            img.alt='张学友';            img.title='张学友';        }    </script></body></code></pre><p>显示效果如下：(本代码在md文件中更改src属性后出错)</p>    <div class="exampleOf4-2">        <button id="btn1OfExample4-2">刘德华</button>        <button id="btn2OfExample4-2">张学友</button>        <br>        <img src="/2022/03/16/qian-duan-xue-xi/javascript/js-xue-xi-bi-ji-part01/01.jpg" alt="刘德华" id="imgOfExample4-2" title="刘德华" style="width: 400px;">    </div>    <script>        //1. 获取元素        var btn1=document.getElementById('btn1OfExample4-2');        var btn2=document.getElementById('btn2OfExample4-2');        var img=document.getElementById('imgOfExample4-2');        //2. 注册事件        btn1.onclick = function() {            img.src='JS学习Part01/01.jpg';            img.alt='刘德华';            img.title='刘德华';        }        btn2.onclick = function() {            img.src='JS学习Part01/02.png';            img.alt='张学友';            img.title='张学友';        }    </script><br><strong>案例：分时显示不同图片，显示不同问候语</strong><p><strong>要求：</strong></p><ul><li>根据不同时间，页面显示不同图片，同时显示不同的问候语<ul><li>如果上午时间打开页面，显示上午好，显示上午的图片</li><li>如果下午时间打开页面，显示下午好，显示下午的图片</li><li>如果晚上时间打开页面，显示晚上好，显示晚上的图片</li></ul></li></ul><p><strong>分析:</strong></p><h2 id="title05">5. 节点操作</h2>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记Part04</title>
      <link href="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/"/>
      <url>/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/</url>
      
        <content type="html"><![CDATA[<h1>CSS学习笔记 Part04</h1><p><strong>目录</strong><br><a href="#title01">1. 浮动</a><br><a href="#title02">2. 常见网页布局</a><br><a href="#title03">3. 清除浮动</a><br><a href="#title04">4. PS切图</a><br><a href="#title05">5. 学成在线案例</a></p><span id="more"></span><style>    .red {        /* color: red; */        font-weight: 700;    }</style><h2 id="title01">1. 浮动</h2><h3>1.1 传统网页布局的三种方式</h3><p>网页布局的本质——用CSS来摆放盒子。把盒子摆放到相应位置</p><p>CSS提供了三种传统布局方式（简单说，就是盒子如何进行排列顺序）：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><p>三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了</p><p><strong class="red">注意：</strong>实际开发中，一个页面基本都包含了这三种布局方式</p><h3>1.2 标准流（普通流/文档流）</h3><p>所谓的标准流：<span class="red">标签按照规定好默认方式排列</span></p><ol><li>块级元素会独占一行，从上向下顺序排列<ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘自动换行<ul><li>常用元素：span、a、i、em等</li></ul></li></ol><p>以上都是标准布局，是最基本的布局方式</p><h3>1.3 为什么需要浮动？</h3><p>提问1：如何让多个块级盒子（div）排列成一行？</p><p>总结：有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式</p><p>浮动最典型的应用：可以让多个块级元素一行内排列显示</p><p>网页布局第一准则：<span class="red">多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</span></p><p>示例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .floatExample > div {        float: left;        width: 50px;        height: 50px;        background-color: pink;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class='floatExample'>        <div>1</div>        <div>2</div>        <div>3</div>    </div></body></code></pre><p>显示效果如下：</p><style>    .floatExample > div {        float: left;        width: 50px;        height: 50px;        background-color: pink;    }</style>    <div class="floatExample">        <div>1</div>        <div>2</div>        <div>3</div>    </div><br><br><h3>1.4 什么是浮动？</h3><p><span class="red">float</span>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { float: 属性值 }</code></pre><table>    <tbody><tr><th>属性值</th><th>描述</th></tr>    <tr><td>none</td><td>元素不浮动（默认值）</td></tr>    <tr><td>left</td><td>元素向左浮动</td></tr>    <tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h3>1.5 浮动特性（重难点）</h3><ol><li><p>设置了浮动（float）的元素最重要特性：</p><ul><li>脱离标准普通流的控制（浮），移动到指定位置（动），俗称脱标</li><li>浮动的盒子<span class="red">不再保留原先的位置</span></li></ul></li><li><p>如果多个盒子都设置了浮动，则它们会按照属性值<span class="red">一行内显示并且顶端对齐排列</span></p><ul><li><strong class="red">注意：</strong><span>浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐</span></li></ul></li><li><p>浮动元素会具有行内块元素特性</p><ul><li>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有<strong class="red">行内块元素</strong>相似的特性</li><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着的</li><li>行内元素同理</li></ul></li></ol><h3>1.6 浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置，网页布局一般采取的策略是：<br><span class="red">先用标准流的父级元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则</span></p><p><strong>案例：小米布局案例</strong></p><p><span class="red">网页布局第二准则：</span>先设置盒子大小，之后设置盒子的位置</p><p><strong>案例1：小米布局案例1</strong></p><p>案例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .xiaomiLayout1 {        width: 1200px;        height: 460px;        background-color: pink;        margin: 0 autu;    }    .leftInXMLayout {        float: left;        width: 230px;        height: 460px;        background-color: purple;    }    .rightInXMLayout {        float: left;        width: 970px;        height: 460px;        background-color: skyblue;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class='xiaomiLayout1'>        <div class='leftInXMLayout'>        </div>        <div class='rightInXMLayout'>        </div>    </div></body></code></pre><p>显示效果如下：</p><style>    .xiaomiLayout1 {        width: 1200px;        height: 460px;        background-color: pink;        margin: 0 autu;    }    .leftInXMLayout {        float: left;        width: 230px;        height: 460px;        background-color: purple;    }    .rightInXMLayout {        float: left;        width: 970px;        height: 460px;        background-color: skyblue;    }</style>    <div class="xiaomiLayout1">        <div class="leftInXMLayout">        </div>        <div class="rightInXMLayout">        </div>    </div><p><strong>案例2：小米布局案例2</strong></p><p>案例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .xiaomiLayout2 {        margin: 0;        padding: 0;        width: 1226px;        height: 285px;        background-color: pink;    }    .xiaomiLayout2 > li {        list-style: none;        float: left;        width: 296px;        height: 285px;        background-color: skyblue;         margin-right: 14px;    }    .xiaomiLayout2 > .lastBox {        margin-right: 0;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <ul class='xiaomiLayout2'>        <li>1</li>        <li>2</li>        <li>3</li>        <li class='lastBox'>4</li>    </ul></body></code></pre><p>显示效果如下:</p><style>    .xiaomiLayout2 {        margin: 0;        padding: 0;        width: 1226px;        height: 285px;        background-color: pink;    }    .xiaomiLayout2 > li {        list-style: none;        float: left;        width: 296px;        height: 285px;        background-color: skyblue;         margin-right: 14px;    }    .xiaomiLayout2 > .lastBox {        margin-right: 0;    }</style>    <ul class="xiaomiLayout2">        <li>1</li>        <li>2</li>        <li>3</li>        <li class="lastBox">4</li>    </ul><p><strong>案例3：小米布局案例3</strong></p><p>案例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .xiaomiLayout3 {        width: 1226px;        height: 615px;        background-color: pink;        margin: 0 auto;    }    .xiaomiLayout3 > .leftInXMLayout3 {        float: left;        width: 234px;        height: 615px;        background-color: purple;    }    .xiaomiLayout3 > .rightInXMLayout3 {        float: left;        width: 992px;        height: 615px;        background-color: skyblue;    }    .rightInXMLayout3 > div {        float: left;        width: 234px;        height: 300px;        background-color: pink;        margin-left: 14px;        margin-bottom: 14px;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class='xiaomiLayout3'>        <div class='leftInXMLayout3'>        1</div>        <div class='rightInXMLayout3'>            <div>1</div>            <div>2</div>            <div>3</div>            <div>4</div>            <div>5</div>            <div>6</div>            <div>7</div>            <div>8</div>        </div>    </div></body></code></pre><p>显示效果如下:</p><style>    .xiaomiLayout3 {        width: 1226px;        height: 615px;        background-color: pink;        margin: 0 auto;    }    .xiaomiLayout3 > .leftInXMLayout3 {        float: left;        width: 234px;        height: 615px;        background-color: purple;    }    .xiaomiLayout3 > .rightInXMLayout3 {        float: left;        width: 992px;        height: 615px;        background-color: skyblue;    }    .rightInXMLayout3 > div {        float: left;        width: 234px;        height: 300px;        background-color: pink;        margin-left: 14px;        margin-bottom: 14px;    }</style>    <div class="xiaomiLayout3">        <div class="leftInXMLayout3">        1</div>        <div class="rightInXMLayout3">            <div>1</div>            <div>2</div>            <div>3</div>            <div>4</div>            <div>5</div>            <div>6</div>            <div>7</div>            <div>8</div>        </div>    </div><h2 id="title02">2. 常见网页布局</h2><h3>2.1 常见网页布局</h3><p>通栏：与浏览器宽度相同的盒子</p><p>示例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .webPageLayout {        margin: 0;        padding: 0;        width: 1226px;    }    .webPageLayout > .topInWPLayout {        height: 50px;        background-color: gray;    }    .webPageLayout > .bannerInWPLayout {        width: 980px;        height: 150px;        background-color: gray;        margin: 10px auto;    }    .webPageLayout > .boxInWPLayout {        width: 980px;        height: 300px;        margin: 0 auto;        background-color: pink;    }    .boxInWPLayout > ul {        padding: 0;    }    .boxInWPLayout > ul > li {        list-style: none;        float: left;        width: 237px;        height: 300px;        background-color: gray;        margin-right: 10px;    }    .boxInWPLayout > ul > .last {        margin-right: 0;    }    .webPageLayout > .footerInWPLayout {        height: 200px;        background-color: gray;        margin-top: 10px;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class='webPageLayout'>        <div class='topInWPLayout'>        top        </div>        <div class='bannerInWPLayout'>        banner        </div>        <div class='boxInWPLayout'>            <ul>                <li>1</li>                <li>2</li>                <li>3</li>                <li class='last'>4</li>            </ul>        </div>        <div class='footerInWPLayout'>        footer        </div>    </div></body></code></pre><p>显示效果如下：</p><style>    .webPageLayout {        margin: 0;        padding: 0;        width: 1226px;    }    .webPageLayout > .topInWPLayout {        height: 50px;        background-color: gray;    }    .webPageLayout > .bannerInWPLayout {        width: 980px;        height: 150px;        background-color: gray;        margin: 10px auto;    }    .webPageLayout > .boxInWPLayout {        width: 980px;        height: 300px;        margin: 0 auto;        background-color: pink;    }    .boxInWPLayout > ul {        padding: 0;    }    .boxInWPLayout > ul > li {        list-style: none;        float: left;        width: 237px;        height: 300px;        background-color: gray;        margin-right: 10px;    }    .boxInWPLayout > ul > .last {        margin-right: 0;    }    .webPageLayout > .footerInWPLayout {        height: 200px;        background-color: gray;        margin-top: 10px;    }</style>    <div class="webPageLayout">        <div class="topInWPLayout">        top        </div>        <div class="bannerInWPLayout">        banner        </div>        <div class="boxInWPLayout">            <ul>                <li>1</li>                <li>2</li>                <li>3</li>                <li class="last">4</li>            </ul>        </div>        <div class="footerInWPLayout">        footer        </div>    </div><h3>2.2 浮动布局的注意点</h3><ol><li><strong>浮动和标注流的父盒子搭配</strong></li><li><strong>一个元素浮动了，理论上其余的兄弟元素也要浮动</strong></li></ol><h2 id="title03">3. 清除浮动</h2><h3>3.1 为什么需要清楚浮动</h3><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子</p><ul><li>由于浮动元素不再占用原文档留的位置，所以它会对后面的元素排版产生影响</li></ul><h3>3.2 清除浮动的本质</h3><ul><li>清除浮动的本质就是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li><span class="red">清除浮动之后，父级盒子就会根据浮动的子盒子自动检测高度，父级盒子有了高度，就不会影响下面的标准流盒子了</span></li></ul><h3>3.3 清除浮动方法</h3><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">选择器 { clear: 属性值; }</code></pre> <table>    <thead>        <tr>            <th>属性值</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>left</td>            <td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>        </tr>        <tr>            <td>right</td>            <td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>        </tr>        <tr>            <td>both</td>            <td>同时清除左右两侧浮动的影响</td>        </tr>    </tbody></table><p>实际工作中，几乎只用<span class="red">clear: both;</span></p><p><span class="red">清除浮动的策略是：闭合浮动</span></p><p><strong>清除浮动具体方法:</strong></p><ol><li><strong class="red">额外标签法</strong>称为隔墙法，是W3C推荐的方法</li><li>父级添加<span class="red">overflow属性</span></li><li>父级添加<span class="red">:after伪元素</span></li><li>父级添加<span class="red">双伪元素</span></li></ol><h4>3.3.1 清除浮动——额外标签法</h4><p>额外标签法会在浮动元素末尾添加一个空的标签。例如<br><code>&lt;div style="clear: both"&gt;&lt;/div&gt;</code>，或者其他标签如<code>&lt;br/&gt;</code>等<br>但是这个额外的标签必须是块级元素，不能是行内元素</p><ul><li>优点：通俗易懂</li><li>缺点：添加了许多无意义的标签，结构化较差，故不常用</li></ul><h4>3.3.2 清除浮动——父级添加overflow属性</h4><p>可以给<span class="red">父级元素</span>添加<span class="red">overflow属性</span>，将其属性值设置为<span class="red">hidden、auto、scroll</span></p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><h4>3.3.3 清除浮动——:after伪元素法</h4><p><span class="red">:after伪元素</span>方式是额外标签法的升级版，也是给父元素添加</p><pre class=" language-language-css"><code class="language-language-css">.clearfix:after {    content: "";    display: block;    height: 0;    clear: both;    visibility: hidden;}.clearfix {    /* IE6、7专有 */    *zoom: 1;}</code></pre><h4>3.3.4 清除浮动——双伪元素清除浮动</h4><p>也是给父元素添加，语法如下：</p><pre class=" language-language-css"><code class="language-language-css">.clearfix:before,.clearfix:after {    content: "";    display: table;}.clearfix:after {    clear: both;}.clearfix {    *zoom: 1;}</code></pre><ul><li>优点：代码更简洁</li><li>缺点： 照顾低版本浏览器</li><li>代表网站： 小米、腾讯等</li></ul><h3>3.4 清除浮动总结</h3><p>需要清除浮动的情况：（满足了下述三点必须清除）</p><ol><li>父级没有高度</li><li>子盒子浮动了</li><li>影响了下面的布局</li></ol> <table>    <thead>        <tr>            <th>清除浮动方式</th>            <th>优点</th>            <th>缺点</th>        </tr>    </thead>    <tbody>        <tr>            <td>额外标签法（隔墙法）</td>            <td>通俗易懂，书写方便</td>            <td>添加许多无意义的标签，结构化较差</td>        </tr>        <tr>            <td>父级overflow: hidden</td>            <td>书写简单</td>            <td>溢出隐藏了</td>        </tr>        <tr>            <td>父级:after伪元素</td>            <td>结构语义化正确</td>            <td>由于IE6-7不支持:after，兼容性问题</td>        </tr>        <tr>            <td>父级双伪元素</td>            <td>结构语义化正确</td>            <td>由于IE6-7不支持:after，兼容性问题</td>        </tr>    </tbody></table><h2 id="title04">4. PS切图</h2><p>PS有很多切图方式：图层切图、切片切图、PS插件切图</p><h3>4.1 常见的图片格式</h3><ol><li>jpg图像格式：JPEG（JGP）对色彩的信息保留较好，高清，颜色较多，<span class="red">产品类的图片经常用jpg格式</span></li><li>gif图像格式：GIF格式最多智能存储256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果，<span class="red">实际经常用于一些图片小动画效果</span></li><li>png图像格式：一种新型的网络图形格式，结合GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景。<span class="red">如果想要切成背景透明的图片，选择png格式</span></li><li>psd图像格式：PS专用格式，可以存放图层、通道、遮罩等多种设计稿。<span class="red">对于前端人员最大优点：可以直接从上面复制文字、获得图片、测量大小和距离</span></li></ol><h3>4.2 图层切图</h3>最简单的切图方式：右击图层-快速导出为PNG<p>合并图层导出：</p><ol><li>选中需要的图层-图层菜单-合并图层</li><li>右击-快速导出为PNG</li></ol><h3>4.3 切片切图</h3><ol><li>利用切片选中图片<ul><li>利用切片工具手动划出</li></ul></li><li>导出选中的图片<ul><li>文件菜单-导出-存储为web设备所用格式-选择图片格式-存储</li></ul></li></ol><h3>4.4 PS插件切图</h3><p><span class="red">Cutterman</span>是一款运行在PS中的插件，自动将需要的图层进行输出，以替代传统的手工导出Web所用格式以及使用切片工具进行挨个切图的繁琐流程</p><p>官网：<a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>使用方法略</p><h2 id="title05">5. 学成在线案例</h2><ol><li>典型的企业级网站</li><li>目的是为了整体感知企业级网站布局流程，复习以前知识</li></ol><h3>5.1 准备素材和工具</h3><ol><li>学成在线PSD源文件</li><li>开发工具: PS/cutterman插件+vscode（代码）+chrome（测试）</li></ol><h3>5.2 案例准备工作 </h3><p>我们本次采取结构与样式相分离思想:</p><ol><li>创建study目录文件夹（用于存放这个页面的相关内容）</li><li>用vscode打开这个目录文件夹</li><li>study目录内新建images文件夹，用于保存图片</li><li>新建首页文件index.html（网站首页统一规定为index.html）</li><li>新建style.css样式文件，采用外链样式表</li><li>将样式引入HTML页面文件中</li><li>样式表写入清楚内外边距的样式，来检测样式表是否引入成功</li></ol><h3>5.3 CSS属性书写顺序（重点）</h3><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display/position/float/clear/visibility/overflow（建议display第一个写，因关系到模式）</li><li>自身属性：width/height/margin/padding/border/background</li><li>文本属性：color/font/text-decoration/text-align/vertical-space/break-word</li><li>其他属性(CSS3)：content/cursor/border-radius/box-shadow/background: linear-gradient……</li></ol><p>示例代码如下：</p><pre class=" language-language-css"><code class="language-language-css">.jdc {    display: block;    position: relative;    float: left;    width: 100px;    height: 100px;    margin: 0 10px;    padding: 20px 0;    font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;    color: #333;    background: rgba(0, 0, 0, .5);    border-radius: 10px;}</code></pre><h3>5.4 页面布局整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路：</p><ol><li>必须确定页面的版心（可视区），测量可得知</li><li>分析页面中的行模块，以及每个行模块中的列模块。即页面布局第一准则</li><li>一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置。即页面布局第二准则</li><li>制作HTML结构。遵循先有结构、后有样式的原则。结构永远最重要</li></ol><h3>5.5 确定版心</h3><p>每个版心都要啊水平居中，可以定义版心为公共类。该页面版心为1200像素：</p><pre class=" language-language-css"><code class="language-language-css">.w {    width: 1200px;    margin: auto;}</code></pre><h3>5.6 头部制作</h3><img src="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/01.jpg" alt="头部分析图" title="头部分析图"><ol><li>1号是版心盒子header 1200*42 的盒子，水平居中对齐，上下给一个margin值即可</li><li>版心盒子里面包含2号盒子logo</li><li>版心盒子里面包含3号盒子nav导航栏</li><li>版心盒子里面包含4号盒子search搜索框</li><li>版心盒子里面包含5号盒子user个人信息</li><li>header中的4个盒子必须都是浮动的</li></ol><p><strong>导航栏制作：</strong></p><ol><li><span class="red">实际开发中，不会直接用链接a标签，而是用li标签包好a的做法（li+a）</span></li><li>li+a语义更清晰，一看这就是有条理的列表型内容</li><li>如果直接用a标签，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li><li>让导航栏一行显示，给li加浮动，因为li是块级元素，需要一行显示</li><li>nav导航栏可以不给宽度，将来可以继续添加其余文字</li><li>因为导航栏里面文字不一样多，所以最好给链接a左右padding撑开盒子，而不是指定宽度</li></ol><p><strong>搜索框制作：</strong></p><ol><li>一个search大盒子里面包含两个表单：input文本框、button按钮</li><li>按钮button默认有个边框需要手动去掉</li><li>input、button为行内块元素，默认之间有间距，可以通过浮动清除间距</li></ol><h3>5.7 banner制作</h3><img src="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/02.jpg" alt="banner分析图" title="banner分析图"><ol><li>1号盒子是通栏的大盒子banner，不给宽度，给高度，给一个蓝色的背景</li><li>2号盒子是版心，要水平居中对齐</li><li>3号盒子版心内，左对齐subnav侧导航栏</li><li>4号盒子版心内，右对齐course课程</li></ol><h3>5.8 精品推荐小模块制作</h3><img src="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/03.jpg" alt="精品推荐小模块分析图" title="精品推荐小模块分析图"><ol><li>大盒子水平居中goods精品，注意自处有个盒子阴影</li><li>1号盒子时标题h3左侧浮动</li><li>2号盒子里面放链接左侧浮动，goods-item距离可以控制链接的左右外边距（注意行内元素只给左右外边距）</li><li>3号盒子右浮动mod修改</li></ol><h3>5.9 精品推荐大模块制作</h3><img src="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/04.jpg" alt="精品推荐大模块分析图" title="精品推荐大模块分析图"><ol><li>1号盒子为最大的盒子，box版心水平居中对齐</li><li>2号盒子为上面部分， box-hd，里面左侧标题h3左浮动，右侧链接a右浮动</li><li>3号盒子为底下部分，box-hd，里面是无序列表，有10个小li构成</li><li>小li外边距的问题，小技巧，给box-hd宽度为1215就可以一行装开5个li了</li></ol><h3>5.10 底部模块制作</h3><img src="/2022/03/13/qian-duan-xue-xi/css/css-xue-xi-bi-ji-04/05.jpg" alt="底部模块分析图" title="底部模块分析图"><ol><li>1号盒子是通栏大盒子，底部footer给高度，底色是白色</li><li>2号盒子版心水平居中</li><li>3号盒子版权copyright 左对齐</li><li>4号盒子链接组links 右对齐</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CSharp的GH插件开发Part1</title>
      <link href="/2022/02/28/csharpforgh/csharpforgh01/"/>
      <url>/2022/02/28/csharpforgh/csharpforgh01/</url>
      
        <content type="html"><![CDATA[<h1>基于C#的GH插件开发Part1</h1><p><strong>前言</strong></p><blockquote><p>搜寻国内大多数视频网站与博客，均未见详细系统介绍Grasshopper插件开发的内容<br>故撰写本文章，为有此方面兴趣的小伙伴提供参考</p><p>本文内容基于 <a href="https://www.icd.uni-stuttgart.de/teaching/workshops/workshop-live-streaming-c-scripting-and-plugin-development-for-grasshopper/">斯图加特大学公开课程：C# Scripting and Plugin Development for Grasshopper</a><br>视频学习内容详见：<a href="https://www.youtube.com/watch?v=pFCrIzENDn8&amp;t=1s">https://www.youtube.com/watch?v=pFCrIzENDn8&amp;t=1s</a><br>(注：某视频网站有转载视频，可供学习)</p><p>文章仅供学习参考，严禁用于商业用途,未经作者允许，请勿转载，违者必究！</p></blockquote><p>本文主要讲解如何搭建Visual Studio与GH工作流。</p><p>无论什么专业的工作，良好的工作流都可以不同程度地提高工作效率。在基于C#的GH插件开发中，使用Visual Studio已有模板进行插件开发，搭建良好的工作流直观具体的体现便是减少了无效的窗口切换与鼠标点击，极大地提高了测试电池的效率。</p><p><strong>目录</strong></p><p><a href="#title1">1. 所需软件</a><br><a href="#title2">2. 下载并安装Grasshopper模板文件</a><br><a href="#title3">3. 创建一个GH项目</a><br><a href="#title4">4. 链接Visual Studio与GH</a><br><a href="#title5">5. 创建第一个电池</a></p><span id="more"></span><h3 id="title1">1. 所需软件</h3><ol><li>Visual Studio（下文缩写为VS）</li><li>Rhino 5 or 6 or 7</li></ol><p>笔者使用的是VS 2019与Rhino 7。</p><p><strong>注意：</strong>Rhino 5及之前的版本，需要额外下载并安装Grasshopper，而Rhino从 6.0版本便内置了Grasshopper，笔者推荐使用6.0 及以上版本的Rhino。</p><h3 id="title2">2. 下载并安装Grasshopper模板文件</h3><ol><li>打开VS任意创建一个项目后，进入主界面</li><li>点击上方菜单栏：扩展-管理扩展，在右上方搜索框中输入 Grasshopper templates for v6，选中第一个查找结果并点击下载</li></ol><p><img src="/2022/02/28/csharpforgh/csharpforgh01/CSharpForGh01%5C01downloadGHTemplates.jpg" alt="下载GH模板文件" title="下载GH模板文件"></p><!-- <img src="imgs\01downloadGHTemplates.jpg" alt="下载GH模板文件" title="下载GH模板文件"> --><br><p>注：</p><ul><li>笔者因已经下载，所以未显示出下载按钮</li><li>若搜索无结果，可以使用安全上网工具后再次尝试；或进入官网下载：<a href="https://marketplace.visualstudio.com/items?itemName=McNeel.GrasshopperAssemblyforv6&amp;ssr=false">Grasshopper templates for v6 - Visual Studio Marketplace</a></li><li>v7版本的模板文件笔者未能使用成功，若有成功者，期待回馈</li></ul><h3 id="title3">3. 创建一个GH项目</h3><h4>3.1 新建项目</h4><p><img src="/2022/02/28/csharpforgh/csharpforgh01/02createAProject-1.jpg" alt="选择项目文件" title="选择项目文件"></p><!-- <img src="imgs/02createAProject-1.jpg" alt="选择项目文件" title="选择项目文件"> --><br><h4>3.2 添加References and debug paths</h4><p>笔者的路径如下：</p><ul><li>Grasshopper: E:\Program Files\Rhino 7\Plug-ins\Grasshopper\Grasshopper.dll</li><li>RhinoCommon: E:\Program Files\Rhino 7\System\RhinoCommon.dll</li><li>Rhino.exe: E:\Program Files\Rhino 7\System\Rhino.exe</li></ul><p><img src="/2022/02/28/csharpforgh/csharpforgh01/03createAProject-2.jpg" alt="添加References and debug paths" title="添加References and debug paths"></p><!-- <img src="imgs/03createAProject-2.jpg" alt="添加References and debug paths" title="添加References and debug paths" > --><br><h3 id="title4">4. 链接VS与GH</h3><p>此处所说的链接实际上是将每次执行"生成解决方案"生成的gha文件直接添加至GH的Libraries文件夹。</p><h4>4.1 设置生成事件</h4><p>于VS界面右侧的解决方案资源管理器中，右击Properties-打开-生成实践，进入生成后事件命令行。</p><p><img src="/2022/02/28/csharpforgh/csharpforgh01/04creationEvent.jpg" alt="设置生成事件" title="设置生成事件"></p><!-- <img src="imgs/04creationEvent.jpg" alt="设置生成事件" title="设置生成事件" > --><br><p>可以看见文本框中已有以下内容：</p><pre><code>Copy "$(TargetPath)" "$(TargetDir)$(ProjectName).gha"Erase "$(TargetPath)"</code></pre><p>其中，第一行代码的作用就是将gha文件生成于项目所在文件夹的bin文件夹中。</p><p>基于此，我们可以将该gha文件直接生成至GH的Libraries文件夹，只需添加一行代码：</p><pre><code>Copy "$(TargetPath)" "$(TargetDir)$(ProjectName).gha"Copy "$(TargetPath)" "C:\Users\UserName\AppData\Roaming\Grasshopper\Libraries\$(ProjectName).gha"Erase "$(TargetPath)"</code></pre><p>Libraries文件夹可以通过GH界面的菜单栏中：FIle-Special Foders-Components Folder打开，进而获得路径。</p><p><img src="/2022/02/28/csharpforgh/csharpforgh01/05findLibraries.jpg" alt="寻找Libraries路径" title="寻找Libraries路径"></p><!-- <img src="imgs/05findLibraries.jpg" alt="寻找Libraries路径" title="寻找Libraries路径" > --><br><h4>4.2 使用指令重新加载GH</h4><p>进行C#开发GH插件时，每次重新生成事件后，GH一般处于开启状态，此时若要对重新生成的电池进行测试，需要关闭GH文件，然后输入指令进行GH的重新加载。</p><p>关闭GH文件需要点击窗口右上角 X(关闭窗口) 按钮下方的按钮,该窗口可以切换用户已打开的不同GH电池文件,点击对应GH文件的关闭按钮即可关闭GH文件。重新加载时需要保证所有GH文件已关闭。</p><p><img src="/2022/02/28/csharpforgh/csharpforgh01/06closeGhFile.jpg" alt="关闭GH文件" title="关闭GH文件"></p><!-- <img src="imgs/06closeGhFile.jpg" alt="关闭GH文件" title="关闭GH文件" > --><br><br><p>进入Rhino界面，于指令输入处输入：<code>_GrasshopperReloadAssemblies</code>，看见指令窗口显示<br><code>only use it if it *really* solves a problem you are having.</code>说明该指令执行成功。</p><p>注：笔者这里将该指令记录为别名GRA，便于输入。读者可以根据自己喜好将该指令设置为别名或者快捷键。</p><p><strong>别名设置方法：</strong><br>Rhino菜单栏处点击：工具-选项-别名-新增</p><p>笔者设置效果如下：</p><table>    <tbody><tr><th>别名</th><th>指令巨集：</th></tr>    <tr><td>GRA</td><td>_GrasshopperReloadAssemblies</td></tr></tbody></table><br><p><strong>快捷键设置方法：</strong><br>Rhino菜单栏处点击：工具-选项-键盘</p><h3 id="title5">5. 创建第一个电池</h3><h4>5.1 修改公共构造函数</h4><p>点击component.cs文件，进入文件内部，找到如下代码：</p><pre class=" language-language-csharp"><code class="language-language-csharp">public CSharpForGhTutorialComponent()  : base("CSharpForGhTutorial", "Nickname",      "Description",      "Category", "Subcategory"){}</code></pre><p>这是电池的构造函数，每一个电池都必须提供一个没有任何参数的公共构造函数。</p><p>各参数的含义如下：</p><table>    <tbody><tr><th>参数（字符串）</th><th>含义</th><th>注意</th></tr>    <tr><td>"CSharpForGhTutorial"</td><td>电池的完整名称</td><td>该字符串与用户创建项目时的名称相同</td></tr>    <tr><td>"Nickname"</td><td>电池的完整名称</td><td></td></tr>    <tr><td>"Description"</td><td>电池的功能描述</td><td></td></tr>    <tr><td>"Category"</td><td>组件将出现在其中的选项卡</td><td>若用户使用不存在的选项卡，将自动创建新的选项卡/td&gt;</td></tr>    <tr><td>"Subcategory"</td><td>组件将出现在其中的面板</td><td>若用户使用不存在的面板，将自动创建新的面板</td></tr></tbody></table><br><p>将该部分代码修改成如下所示，便于体会其功能：</p><pre class=" language-language-csharp"><code class="language-language-csharp">public CSharpForGhTutorialComponent()  : base("CSharpForGhTutorial", "C#ForGh",      "Test Component",      "Params", "Primitive"){}</code></pre><h4>5.2 生成电池</h4><p>于VS的菜单栏中点击：生成-生成解决方案。快捷键 <code>Ctrl+Shift+B</code><br>底部输出信息显示成功即可。</p><p>第一次加载一般需要重新关闭Rhino软件，打开后进入GH界面，发现在Parmrs选项卡的Primitive面板中，增加了名为CSharpForGhTutorial的电池。</p><p><img src="/2022/02/28/csharpforgh/csharpforgh01/07firstComponent.jpg" alt="生成第一个电池" title="生成第一个电池"></p><!-- <img src="imgs/07firstComponent.jpg" alt="生成第一个电池" title="生成第一个电池" > --><br><h4>5.3 完善电池功能</h4><h5>5.3.1 完善输入参数</h5><p>回到VS界面，于component.cs文件中找到如下代码：</p><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager){}</code></pre><p>该函数的作用是为电池增加输入参数。</p><p>下面我们为其增加一个输入端，输入类型为double型数字：</p><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager){    pManager.AddNumberParameter("testInput", "tI", "The input for testing", GH_ParamAccess.item);}</code></pre><h5>5.3.2 完善输出参数</h5><p>找到如下代码：</p><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager){}</code></pre><p>该函数的作用是为电池增加输出参数。</p><p>同样为其增加一个输入端，输入类型为double型数字：</p><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager){    pManager.AddNumberParameter("testOutput", "tO", "The output for testing", GH_ParamAccess.item);}</code></pre><h5>5.3.3 完善功能代码</h5><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void SolveInstance(IGH_DataAccess DA){}</code></pre><p>该函数为电池运行的功能代码。</p><p>增加代码使其完成简单的+1功能：</p><pre class=" language-language-csharp"><code class="language-language-csharp">protected override void SolveInstance(IGH_DataAccess DA){    double input = double.NaN;    DA.GetData("testInput", ref input);    double output = input + 1;    DA.SetData("testOutput", output);}</code></pre><h4>5.4 更新电池</h4><p>保证代码输入正确后，点击：生成-生成解决方案，重新生成gha文件；<br>回到GH界面，关闭所有GH文件，包括空白的unnamed文件也要关闭；<br>于Rhino中输入<code>_GrasshopperReloadAssemblies</code>（笔者输入别名 <code>GRA</code>），更新GH；<br>发现电池已经拥有了输入端和输出端，并且可以完成简单的+1功能了。</p><p><img src="/2022/02/28/csharpforgh/csharpforgh01/08updateComponent.jpg" alt="生成第一个电池" title="生成第一个电池"></p><!-- <img src="imgs/08updateComponent.jpg" alt="生成第一个电池" title="生成第一个电池" > --><br><p>以上，读者就已经掌握了基础的通过VS开发GH插件的工作流程。<br>希望本篇文章对您有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Grasshopper </category>
          
          <category> C#_For_Gh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grasshopper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安交通大学2021-2022学年建筑结构与选型试题（A）</title>
      <link href="/2022/02/23/jian-zhu-xue-xi/jian-zhu-jie-gou/2022-nian-jian-zhu-jie-gou-shi-ti-a/"/>
      <url>/2022/02/23/jian-zhu-xue-xi/jian-zhu-jie-gou/2022-nian-jian-zhu-jie-gou-shi-ti-a/</url>
      
        <content type="html"><![CDATA[<h3 id="西安交通大学2021年下半学年（大三上学期）建筑结构与选型考试题目（附答案与计算过程）">西安交通大学2021年下半学年（大三上学期）建筑结构与选型考试题目（附答案与计算过程）</h3><h4 id="前言：">前言：</h4><blockquote><p>本文仅供学习参考，未经作者允许请勿转发，违者必究。</p></blockquote><h5 id="一、填空题">一、填空题</h5><ol><li><p>梁与柱的区分：梁所受的荷载是横向作用的，荷载与构件(即梁)的纵轴线相____；柱所受的荷载是纵向作用，荷载与构件(即柱)的纵轴线相____。</p></li><li><p>受弯构件按照破坏的性质，有两种破坏的可能，分别是：____破坏和____破坏。</p></li></ol><span id="more"></span><ol start="3"><li><p>大偏心受压短柱的受力、变形特点与____梁类似，属于延性破坏。大偏心受压承载力主要取决于____钢筋。</p></li><li><p>混凝土保护层用来____和使钢筋在混凝土中____。</p></li><li><p>梁斜截面强度要求：有一个合理的____，配置足够的____或____钢筋。</p></li><li><p>柱在偏心轴力作用下将产生侧向挠度f， 侧向挠度要引起____Nf，即二阶弯矩效应。二阶弯矩将使偏心距e0____。</p></li><li><p>偏心受压构件与受弯构件相比，承载力多了____，正是因为它的存在，能增加剪压区高度，延缓斜裂缝的出现和开展，抗剪承载力得到了____。</p></li><li><p>砌体结构中的墙体有承重和非承重区分，填充墙或隔墙非承重墙体的设计主要考虑的是稳定性，进行____验算；而作为受压构件的承重墙，需承受外荷载的作用，设计时除了考虑稳定性外，还必须满足____要求；另外，还需验算大梁下____问题。</p></li><li><p>横墙承重方案特点：横墙间距____，又有纵墙拉结，建筑物整体性____，空间刚度____，对抗风、抗震都____；纵墙门窗开洞灵活；平面布置不能____。</p></li></ol><p>答案：</p><ol><li>垂直、平行</li><li>正截面、斜截面</li><li>双筋、受拉</li><li>保护钢筋不至锈蚀、有足够的粘结力</li><li>截面尺寸、箍筋、弯起</li><li>附加弯矩、进一步增大</li><li>轴向压力、提高</li><li>高厚比、强度、砌体的局部受压</li><li>小、好、大、有利、灵活</li></ol><h5 id="二、简答题">二、简答题</h5><p>1.受弯构件的破坏有几种形态？请详细描述不同形态的破坏特征。</p><p><strong>答：</strong></p><ol><li>受弯构件的破坏有3种形态。分别是：少筋破坏、适筋破坏、超筋破坏。</li><li>不同形态的破坏特征<ul><li>少筋破坏：配筋率低于一定值时，构件承载力很低，表现出“一裂就破”脆性特征。</li><li>适筋破坏：配筋率合适时，受拉钢筋与受压区混凝土基本同时达到强度值，构件在破坏前有明显的变形和裂缝开展的塑性变形特征。</li><li>超筋破坏：配筋率超过一定值时，构件破坏时，受压区混凝土先被压碎，破坏突然发生，钢筋强度得不到充分发挥，构件在破坏前没有明显的变形和裂缝开展过程，破坏带有脆性特征。</li></ul></li></ol><p>2.对于偏心受压构件，为什么实际施工中很少采用非对称配筋方案？</p><p><strong>答：</strong></p><ol><li>柱的偏心荷载作用并不只是从一个方向作用，还有可能从相反的方向作用。</li><li>不对称配筋施工时容易出差错。</li></ol><p>3.关于偏心受压柱的N-M相关曲线，为什么大偏心受压破坏的N-M相关曲线，随N的增大，截面能承担的M相应提高？而小偏心受压破坏的N-M相关曲线，随N的增大，截面能承担的M反而降低？</p><p><strong>答：</strong></p><ol><li>大偏心受压的N-M曲线中，若偏心受压柱不受轴向压力，该柱属于受弯构件。随着轴向力N的增大，使得受拉侧钢筋的抗拉作用增强，同时，N的增大使得受压侧钢筋的抗压力增大，抗压力产生的抵抗弯矩也促使截面整体所能承受的弯矩增大。故大偏心受压破坏时，随N的增大，截面能承担的M相应提高。</li><li>小偏心受压的N-M曲线中，当偏心受压柱处于界限受压破坏时，该柱所能承受的M最大。之后，随着N的增大，受拉侧钢筋因以达到屈服强度，抗拉作用不再提高，而轴向力增大所带来的弯矩增幅大于抗压侧钢筋抵抗力增加所带来的抵抗弯矩增幅。故小偏心受压破坏时，随N的增大，截面能承担的M反而降低。</li></ol><h5 id="三、计算题">三、计算题</h5><p>1.某钢筋混凝土T型梁，截面尺寸如下：$b_f^{‘}=800mm,h_f^{’}=120mm,b=350mm,h=500mm$。该梁采用$C_{25}$混凝土，HRB355钢筋，$A_s=1520mm^2$。现截面承受弯矩$M=480kN·m$，请判断该T形截面是否安全。</p><p>相关数据如下：</p><ul><li>$\alpha_1=1.0, f_c=11.9N/mm^2$ ($C_{25}$的数据)</li><li>$f_y=300N/mm^2$ (HRB335的数据)</li><li>$\xi_b=0.55, \rho_{min}=0.2%$</li><li>$a_s=40mm$</li></ul><p><strong>解：</strong><br>    <strong>1) 计算截面有效高度$h_0$:</strong></p><p>$$<br>h_0=h-a_s=500-40=460mm<br>$$</p><p>    <strong>2) 判断T形截面类型：</strong></p><p>$$<br>\begin{aligned}<br>f_y A_s<br>&amp;= 300<em>1520=456000N=456kN \<br>\alpha_1 f_c b_f^{‘} h_f^{’}<br>&amp;= 1.0</em>11.9<em>800</em>120=1142400N=1142.4kN<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>&amp;\because f_y A_s=456kN &lt; \alpha_1 f_c b_f^{‘} h_f^{’}=1142.4kN \<br>&amp;\therefore 该T形截面属于第一类T形截面<br>\end{aligned}<br>$$</p><p>    <strong>3) 计算受压区高度$x$：</strong></p><p>$$<br>\begin{aligned}<br>x<br>&amp;= \frac{f_y A_s}{\alpha_1 f_c b_f^{'}} \<br>&amp;= \frac{300<em>1520}{1.0</em>11.9<em>800} \<br>&amp; \approx 47.90 mm\<br>\xi_b h_0<br>&amp;=0.55</em>460=253mm&gt;x \<br>\<br>&amp;\therefore 该T型梁不为超筋梁 \<br>\<br>\rho<br>&amp;=\frac{A_s}{bh}=\frac{1520}{350*500} \approx 0.89% &gt; \rho_{min}=0.2% \<br>\<br>&amp;\therefore该T型梁不为少筋梁<br>\end{aligned}<br>$$</p><p>    <strong>4) 计算受弯承载力$M_u$：</strong></p><p>$$<br>\begin{aligned}<br>M_u&amp;=\alpha_1 f_C b_f^{'} x(h_0-\frac{x}{2}) \<br>&amp;= 1.0<em>11.9</em>800*47.90(460-\frac{49.90}{2}) \<br>&amp;= 198842288.4 N \cdot mm \<br>&amp; \approx 198.84 kN \cdot m \<br>M_u &amp;= 198.84kN \cdot m &lt; M=480kN \cdot m \<br>&amp;\therefore 该T型截面不安全<br>\end{aligned}<br>$$</p><p>2.某钢筋混凝土偏心受压柱，截面尺寸$b \times h=350mm \times 450mm$，计算高度$l_0=4.0m$。该梁采用$C_{45}$混凝土，HRB400钢筋。截面承受轴向力$N=1500kN$，考虑二阶效应的弯矩$M=320kN \cdot m$。<br>(1)请判断偏心受压类型<br>(2)计算钢筋面积$A_s=A_s^{'}$</p><p>相关数据如下：</p><ul><li>$\alpha_1=1.0, f_c=21.1N/mm^2$ ($C_{45}$的数据)</li><li>$f_y=f_y^{'}=360N/mm^2$ (HRB400的数据)</li><li>$\xi_b=0.518, \rho_{min}=0.2%$</li><li>$a_s=a_s^{'}=40mm$</li><li>$e_a=20mm$</li><li>$\xi=\frac{N-\alpha_1 f_c b h_0 \xi_b}{\frac{Ne-0.43 \alpha_1 f_c b h_0^2}{(\beta_1-\xi_b)(h_0-a_s^{'})}+\alpha_1 f_c b h_0}+\xi_b$ (小偏心受压公式)</li></ul><p><strong>解：</strong></p><p><strong>(1)</strong></p><p>    <strong>1) 计算截面有效高度$h_0$：</strong></p><p>$$<br>h_0=h-a_s=450-40=410mm<br>$$</p><p>    <strong>2) 计算受压区高度$x$：</strong></p><p>$$<br>x=\frac{N}{\alpha_1 f_c b}=\frac{1500<em>10^3}{1.0</em>21.1*350} \approx 2033.11mm<br>$$</p><p>    <strong>3) 判断偏心受压类型：</strong></p><p>$$<br>\xi_b h_0=0.518*410=212.38mm&gt;x<br>$$</p><p>$$<br>\therefore 该偏心受压柱属于大偏心受压类型<br>$$</p><p><strong>(2)</strong><br>    <strong>1) 计算e：</strong></p><p>$$<br>\begin{aligned}<br>e_0 &amp;= \frac{M}{N}=\frac{320*10^3}{1500} \approx 213.33mm \<br>e_i &amp;= e_0+e_a=213.33+20=233.33mm \<br>e   &amp;= e_i+\frac{h}{2}-a_s=233.33+\frac{450}{2}-40=418.33mm<br>\end{aligned}<br>$$</p><p>    <strong>2) 计算$A_s、A_s^{'}$：</strong></p><p>$$<br>\begin{aligned}<br>\because 2a_s^{'}&amp;=2<em>40=80mm&lt;x=203.11mm \<br>\therefore A_s<br>&amp;= A_s^{‘} \<br>&amp;= \frac{Ne-\alpha_1 f_c b x(h_0-\frac{x}{2})}{f_y^{’} (h_0-a_s^{'})} \<br>&amp;= \frac{1500</em>10^3<em>418.33-1.0</em>21.1<em>350</em>203.11*(410-\frac{203.11}{2})}{360*(410-40)} \<br>&amp; \approx 1237.52mm^2<br>\end{aligned}<br>$$</p><p>    <strong>3) 验算配筋率$\rho$：</strong></p><p>$$<br>\begin{aligned}<br>\rho<br>&amp;= \frac{A_s}{bh}=\frac{1237.52}{350*450} \approx 0.79 % &lt; 3% \<br>\rho<br>&amp;= 0.79% &gt; \rho_{min}=0.2%<br>\end{aligned}<br>$$</p><p>$$<br>\therefore 该钢筋面积符合要求<br>$$</p><p>    <strong>4) 验算垂直于弯矩作用平面的受压承载力$N_u$:</strong></p><p>$$<br>\begin{aligned}<br>\frac{l_0}{b}<br>&amp;= \frac{4000}{350} \approx 11.43 &gt; 8 \<br>\varphi<br>&amp;= \frac{1}{1+0.002(\frac{l_0}{b}-8)^2} \<br>&amp;= \frac{1}{1+0.002*(11.43-8)^2} \<br>&amp;\approx 0.98\<br>N_u<br>&amp;= 0.9\varphi[f_c A+f_y{‘}(A_s+A_s^{’})] \<br>&amp;= 0.9<em>0.98</em>[21.1<em>350</em>450+360*(1237.52*2)] \<br>&amp;= 3716981.201 N \<br>&amp; \approx 3716.98 kN<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>&amp;\because N_u=3716.98kN &gt; N=1500kN \<br>&amp;\therefore 受压承载力满足要求 \<br>&amp;\therefore 综上，A_s=A_s^{'}=1237.52 mm^2<br>\end{aligned}<br>$$</p><p>3.某单层仓库承重外纵墙，墙高$H_0=H=4.8m$，墙厚$h=240mm$，由$MU10$的烧结页岩砖和$M2.5$的水泥砂浆砌筑而成，采用刚性方案。横墙间距$s=24m$。沿墙长每$4m$设$1.2m$宽窗洞，同时沿墙长每$4m$设截面尺寸为$240mm \times 240mm$的钢筋混凝土构造柱。试验算该外纵墙构造柱间墙的高厚比。</p><p>相关数据如下：</p><ul><li>$[\beta]=22$</li></ul><p><strong>解：</strong></p><p><strong>(1) 验算整片墙的高厚比</strong>（注：该步骤可以省略，因题干只要求验算构造柱间墙的高厚比）</p><p>    <strong>1) 计算高厚比$\beta$:</strong></p><p>$$<br>\beta=\frac{H_0}{h}=\frac{4800}{240}=20<br>$$</p><p>    <strong>2) 计算$\mu_1$：</strong></p><p>$$<br>\begin{aligned}<br>&amp;\because 该墙为承重墙 \<br>&amp;\therefore \mu_1=1.0<br>\end{aligned}<br>$$</p><p>    <strong>3) 计算$\mu_2$：</strong></p><p>$$<br>\begin{aligned}<br>\mu_2 = 1-0.4 \frac{b_s}{s} = 1-0.4*\frac{1200}{4000} = 0.88 &gt; 0.7 \<br>\end{aligned}<br>$$</p><p>    <strong>4) 计算$\mu_c$：</strong></p><p>$$<br>\begin{aligned}<br>&amp;\because 该墙体由烧结页岩砖砌筑 \<br>&amp;\therefore \gamma=1.5 \<br>&amp;\mu_c = 1+\gamma \frac{b_s}{l} = 1+1.5*\frac{240}{4000} = 1.09 \<br>\end{aligned}<br>$$</p><p>    <strong>5) 验算高厚比$\beta$：</strong></p><p>$$<br>\begin{aligned}<br>\mu_1 \mu_2 \mu_c [\beta] &amp;= 1.0<em>0.88</em>1.09*22=21.1024 &gt; \beta = 20 \<br>&amp;\therefore 整片墙的高厚比满足要求<br>\end{aligned}<br>$$</p><p><strong>(2) 验算构造柱间墙的高厚比</strong></p><p>    <strong>1) 计算$H_0$：</strong></p><p>$$<br>\begin{aligned}<br>此时s&amp;取构造柱间距离 \<br>s &amp;= l=4m \<br>\because \frac{s}{H} &amp;= \frac{4000}{4800} \approx 0.83 &lt; 1.0 \<br>\therefore H_0 &amp;= 0.6s=0.6*4=2.4m \<br>\end{aligned}<br>$$</p><p>    <strong>2) 计算高厚比$\beta$:</strong></p><p>$$<br>\beta=\frac{H_0}{h}=\frac{2400}{240}=10<br>$$</p><p>    <strong>3) 计算$\mu_1$：</strong></p><p>$$<br>\begin{aligned}<br>&amp;\because 该墙为承重墙 \<br>&amp;\therefore \mu_1=1.0<br>\end{aligned}<br>$$</p><p>    <strong>4) 计算$\mu_2$：</strong></p><p>$$<br>\begin{aligned}<br>\mu_2 = 1-0.4 \frac{b_s}{s} = 1-0.4*\frac{1200}{4000} = 0.88 &gt; 0.7 \<br>\end{aligned}<br>$$</p><p>    <strong>5) 验算高厚比$\beta$：</strong></p><p>$$<br>\begin{aligned}<br>\mu_1 \mu_2 [\beta] &amp;= 1.0<em>0.88</em>22=19.36 &gt; \beta = 10 \<br>&amp;\therefore 构造柱间墙的高厚比满足要求 \<br>(&amp;\therefore 综上，该外纵墙的高厚比满足要求)(若计算了(1),可以添加此句)<br>\end{aligned}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 建筑结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建筑结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记Part03</title>
      <link href="/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/"/>
      <url>/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/</url>
      
        <content type="html"><![CDATA[<h1>CSS学习笔记 Part03</h1><p><strong>目录</strong><br><a href="#title01">1. CSS的三大特性</a><br><a href="#title02">2. CSS的注释</a><br><a href="#title03">3. 盒子模型</a><br><a href="#title04">4. PS基本操作(略)</a><br><a href="#title05">5. 综合案例</a><br><a href="#title06">6. 圆角边框</a><br><a href="#title07">7. 盒子阴影</a><br><a href="#title08">8. 文字阴影</a></p><span id="more"></span><style>    .red {        /* color: red; */        font-weight: 700;    }</style><h2 id="title01">1. CSS的三大特性</h2>CSS由三个非常重要的特性：层叠性、继承性、优先级。<h3> 1.1 层叠性</h3>给相同选择器设置相同的样式，此时一个样式就会<strong>覆盖（层叠）</strong>另一个冲突的样式。层叠性主要解决样式冲突的问题。<p>层叠性原则：</p><ul><li>样式冲突，遵循的原则是<strong>就近原则</strong>，哪个样式离结构近，就执行哪个样式（代码一行一行由上往下执行）</li><li>样式不冲突，不会层叠</li></ul><h3 id="1-2-继承性">1.2 继承性</h3><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。</li><li>子元素可以继承父元素的样式（text-，font-，line-这些元素开头的可以继承，以及color属性）</li></ul><p><strong>行高的继承性</strong></p><pre class=" language-language-css"><code class="language-language-css">body {    font: 12px/1.5 Microsoft YaHei;}</code></pre><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高1.5</li><li>此时子元素的行高是：当前子元素的文字大小*1.5</li><li>body行高1.5这样的写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li></ul><h3 id="1-3-优先级">1.3 优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据<strong>选择器权重</strong>执行</li></ul><h4 id="1-3-1-选择器权重">1.3.1 选择器权重</h4><p>选择器权重如下表所示。</p><table>    <tbody><tr style="text-align: left"><th>选择器</th><th>选择器权重</th></tr>    <tr><td>继承 或者 *（通配符）</td><td>0,0,0,0</td></tr>    <tr><td>元素选择器（标签选择器）</td><td>0,0,0,1</td></tr>    <tr><td>类选择器、伪类选择器</td><td>0,0,1,0</td></tr>    <tr><td>ID选择器</td><td>0,1,0,0</td></tr>    <tr><td>行内样式style=""</td><td>1,0,0,0</td></tr>    <tr><td>!important 重要的</td><td>∞ 无穷大</td></tr></tbody></table><p>**理解：**选择器的指定范围越精确则其权重最高</p><p><strong>优先级注意点：</strong></p><ul><li>权重是由4组数字组成，但是不会有进位</li><li>可以理解为类选择器永远大于元素选择器，id选择器永远大于类选择器，以此类推</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值</li><li>可以简单记忆：通配符和继承权重为0，标签选择器为1，类（伪类）选择器为10，id选择器为100，行内样式表为1000，!important为无穷大</li><li><strong>继承的权重是0</strong>，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li><li>通过上条，可知：看标签执行哪个样式，先看该标签是否直接被选择还是继承的</li></ul><h4 id="1-3-2-权重叠加">1.3.2 权重叠加</h4><p><strong>权重叠加：</strong> 如果是复合选择器，则会有权重叠加，需要计算权重。</p><p>例题如下：</p><ul><li>div ul li&nbsp;&nbsp;&nbsp;------&gt; 0,0,0,3</li><li>.nav ul li ------&gt; 0,0,1,2</li><li>a:hover&nbsp;&nbsp;------&gt; 0,0,1,1</li><li>.nav a&nbsp;&nbsp;&nbsp;&nbsp;------&gt; 0,0,1,1</li></ul><h2 id="title02">2. CSS的注释</h2>CSS的注释格式同C语言，代码如下<pre class=" language-language-css"><code class="language-language-css">/* 我是注释 */</code></pre><h2 id="title03">3. 盒子模型</h2>页面布局要学习三大核心：盒子模型、浮动、定位。<p>学习好<strong>盒子模型</strong>能很好地帮助布局页面。</p><h3 id="3-1-看透网页布局的本质">3.1 看透网页布局的本质</h3><p>网页布局过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子Box</li><li>利用CSS设置好盒子样式，然后拜访到相应位置</li><li>往盒子里装内容</li></ol><p>网页布局的<strong>核心本质：</strong> 利用CSS摆盒子。</p><h3 id="3-2-盒子模型（Box-Model）组成">3.2 盒子模型（Box Model）组成</h3><p>所谓<strong>盒子模型</strong>：就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括：<br>边框（border）、外边距（margin）、内边距（padding）、实际内容（content）。</p><img src="/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/01box_model.jpg" alt="盒子模型" title="盒子模型"><h3 id="3-3-边框（border）">3.3 边框（border）</h3><p><strong>border</strong>可以设置元素的边框。边框有三部分组成：</p><ul><li>边框宽度（粗细）</li><li>边框样式</li><li>边框颜色</li></ul><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">border: border-width || border-style || border-color</code></pre><table>    <tbody><tr style="text-align: left;"><th>属性</th><th>作用</th></tr>    <tr><td>border-width</td><td>定义边框的粗细，单位是px</td></tr>    <tr><td>border-style</td><td>定义边框的样式</td></tr>    <tr><td>border-color</td><td>定义边框的颜色</td></tr></tbody></table><p>CSS的边框属性<strong>border</strong>允许你指定一个元素边框的<strong>样式</strong>和<strong>颜色</strong></p><p>边框简写：</p><pre class=" language-language-css"><code class="language-language-css">border: 5px solid pink; /* 没有顺序 */</code></pre><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .box1 {        width: 300px;        height: 200px;        /*border-width: 5px;        border-style: solid;        border-color: pink;*/        border: 5px solid pink;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!--HTML--><body>    <div class="box1">我是盒子1</div></body></code></pre><p>显示效果如下：</p><style>    .box1 {        width: 300px;        height: 200px;        /*border-width: 5px;        border-style: solid;        border-color: pink;*/        border: 5px solid pink;    }</style>    <div class="box1">我是盒子1</div><p>边框分开写法：</p><pre class=" language-language-css"><code class="language-language-css">border-top: 1px solid red; /* 只设定上边框，其余同理 */</code></pre><p><strong>练习：</strong><br>请给一个200*200的盒子，设置上边框为红色，其余边框为蓝色（提示：注意边框的层叠性）</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .box2 {        width: 200px;        height: 200px;        border: 1px solid blue;        border-top: 1px solid red;     }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!--HTML--><body>    <div class="box2">我是盒子2</div></body></code></pre><p>显示效果如下：</p><style>    .box2 {        width: 200px;        height: 200px;        border: 1px solid blue;        border-top: 1px solid red;     }</style>    <div class="box2">我是盒子2</div><h3 id="3-4-表格的细线边框">3.4 表格的细线边框</h3><p><strong>border-collapse</strong>属性控制浏览器绘制表格边框的方式，控制相邻单元格的边框。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">border-collapse: collapse; /* 合并相邻的边框 */</code></pre><ul><li>collapse单词是倒塌、折叠（合并）的意思</li></ul><h3>3.5 边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要width/height减去边框宽度</li></ol><h3>3.6 内边距（padding）</h3>padding属性用于设置内边距，即边框与内容之间的距离<table>    <tbody><tr><th>属性</th><th>作用</th></tr>    <tr><td>padding-left</td><td>左内边距</td></tr>    <tr><td>padding-right</td><td>右内边距</td></tr>    <tr><td>padding-top</td><td>上内边距</td></tr>    <tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p>padding属性（简写属性）可以有1-4个值</p><table>    <tbody><tr><th>属性值个数</th><th>含义</th></tr>    <tr><td>padding: 5px;</td><td>1个值，代表上下左右内边距都是5像素</td></tr>    <tr><td>padding: 5px 10px;</td><td>2个值，代表上下内边距5像素，左右内边距10像素</td></tr>    <tr><td>padding: 5px 10px 20px</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr>    <tr><td>padding： 5px 10px 20px 30px</td><td>4个值，上内边距5像素，右内边距10像素，下内边距20像素，左内边距30像素。（顺时针）</td></tr></tbody></table><p>当我们给盒子指定了<span class="red">padding</span>值后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子的实际大小<ul><li>也就是说，如果盒子已经有了宽度和高度，此时再指定内边距，和撑大盒子</li></ul></li></ol><p><strong>解决方案：</strong><br>如果保证盒子跟效果图大小保持一直，则让<span class="red">width/height减去多出来的内边距大小</span>即可。</p><p>如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小</p><h3>案例1：新浪导航栏</h3><style>    .nav {        height: 41px;        border-top: 3px solid #ff8500;        border-bottom: 1px solid #edeef0;        background-color: #fcfcfc;        line-height: 41px;            }    .nav a {        /*a属于行内元素，设置高度无效*/        display: inline-block;        height: 41px;        padding: 0 20px;        font-size: 12px;        color: #4c4c4c;        text-decoration: none;    }    .nav a:hover {        background-color: #eee;        color: #ff8500;    }</style>    <div class="nav">        <a href="#">新浪导航</a>        <a href="#">手机新浪网</a>        <a href="#">移动客户端</a>        <a href="#">微博</a>        <a href="#">冲冲冲</a>    </div><br><br>代码如下：<pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .nav {        height: 41px;        border-top: 3px solid #ff8500;        border-bottom: 1px solid #edeef0;        background-color: #fcfcfc;        line-height: 41px;            }    .nav a {        /*a属于行内元素，设置高度无效*/        display: inline-block;        height: 41px;        padding: 0 20px;        font-size: 12px;        color: #4c4c4c;        text-decoration: none;    }    .nav a:hover {        background-color: #eee;        color: #ff8500;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="nav">        <a href="#">新浪导航</a>        <a href="#">手机新浪网</a>        <a href="#">移动客户端</a>        <a href="#">微博</a>        <a href="#">三个字</a>    </div></body></code></pre><h3>案例2：小米导航栏案例修改-padding影响盒子大小计算</h3><p>padding内边距可以撑开盒子，有时候也会让我们去修改宽度。<br>所以侧边栏文字距离左侧的距离不应该用text-indent，这样不精确。<br>实际开发的做法是给padding值，这样更加精确。</p><p>代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .nav2 .xiaomiTab {        display: block;        /* 上一版： width: 230px; */        width: 200px;        height: 40px;        background-color: #55585a;        font-size: 14px;        color: white;        text-decoration: none;        /* 上一版： text-indent: 2em; */        padding-left: 30px;        line-height: 40px;    }    .nav2 .xiaomiTab:hover {        background-color: orange;        color: white;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="nav2">        <a href="#" class='xiaomiTab'>手机 电话卡</a>        <a href="#" class='xiaomiTab'>电视 盒子</a>        <a href="#" class='xiaomiTab'>笔记本 平板</a>        <a href="#" class='xiaomiTab'>出行 穿戴</a>        <a href="#" class='xiaomiTab'>智能 路由器</a>        <a href="#" class='xiaomiTab'>健康 儿童</a>        <a href="#" class='xiaomiTab'>耳机 音响</a>    <div><body></code></pre><p>显示效果如下：</p><style>    .nav2 .xiaomiTab {        display: block;        /* 上一版： width: 230px; */        width: 200px;        height: 40px;        background-color: #55585a;        font-size: 14px;        color: white;        text-decoration: none;        /* 上一版： text-indent: 2em; */        padding-left: 30px;        line-height: 40px;    }    .nav2 .xiaomiTab:hover {        background-color: orange;        color: white;    }</style>    <div class="nav2">        <a href="#" class="xiaomiTab">手机 电话卡</a>        <a href="#" class="xiaomiTab">电视 盒子</a>        <a href="#" class="xiaomiTab">笔记本 平板</a>        <a href="#" class="xiaomiTab">出行 穿戴</a>        <a href="#" class="xiaomiTab">智能 路由器</a>        <a href="#" class="xiaomiTab">健康 儿童</a>        <a href="#" class="xiaomiTab">耳机 音响</a>    <div><h3>3.7 外边距（margin）</h3><h4>3.7.1 外边距定义</h4><span class="red">margin</span>属性用于设置外边距，即控制盒子和盒子之间的距离<table>    <tbody><tr><th>属性</th><th>作用</th></tr>    <tr><td>margin-left</td><td>左外边距</td></tr>    <tr><td>margin-right</td><td>右外边距</td></tr>    <tr><td>margin-top</td><td>上外边距</td></tr>    <tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><h4>3.7.2 外边距典型应用</h4><p>外边距可以让块级盒子<strong class="red">水平居中</strong>，但是必须满足两个条件：</p><ol><li>盒子必须指定了宽度（width）</li><li>盒子<span class="red">左右的外边距</span>都设置为auto</li></ol><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">.header {    width: 960px;    margin: 0 auto;}</code></pre><p>常见写法：</p><ul>    <li>margin-left:auto; margin-right: auto;</li>    <li>margin: auto;</li>    <li class="red">margin: 0 auto;</li></ul><p><strong class="red">注意：</strong>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加text-align: center; 即可</p><h4>3.7.3 外边距合并</h4><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并</p><p>主要有两种情况：</p><ol>    <li><strong>相邻块元素垂直外边距的合并</strong></li>    <li><strong>嵌套块元素垂直外边距的塌陷</strong></li></ol><p><strong>1. 相邻块元素垂直外边距的合并</strong></p><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和。<span class="red">取两个值中的较大者，这种现象被称为</span><strong class="red">相邻块元素垂直外边距的合并</strong>。</p><p><strong>解决方案：</strong><br><span class="red">尽量只给一个盒子添加margin值</span></p><p><strong>2. 嵌套块元素垂直外边距的塌陷</strong></p><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><strong>解决方案：</strong></p><ol><li>可以为父元素定义一个上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加属性 overflow: hidden;</li><li>其他方法。比如浮动、固定。绝对定位的盒子不会有塌陷问题。</li></ol><p>塌陷问题的代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .father{        width: 400px;        height: 400px;        background-color: purple;        margin-top: 50px;    }    .son {        width: 200px;        height: 200px;        background-color: pink;        margin-top: 100px;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="father">        <div class="son">        </div>    </div></body></code></pre><p>显示效果如下：(发生塌陷)</p><style>    .father{        width: 400px;        height: 400px;        background-color: purple;        margin-top: 50px;    }    .son {        width: 200px;        height: 200px;        background-color: pink;        margin-top: 100px;    }</style>    <div class="father">        <div class="son">        </div>    </div><p>解决塌陷的代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .father1{        width: 400px;        height: 400px;        background-color: purple;        margin-top: 50px;        /* border: 1px solid red; */        /* border: 1px solid transparent; */        /* padding: 1px */        /* overflow: hidden; */        /* 以上任写一种即可解决问题 */        padding: 1px;    }    .son1 {        width: 200px;        height: 200px;        background-color: pink;        margin-top: 100px;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class="father1">        <div class="son1">        </div>    </div></body></code></pre><p>显示效果如下：</p><style>    .father1{        width: 400px;        height: 400px;        background-color: purple;        margin-top: 50px;        /* border: 1px solid red; */        /* border: 1px solid transparent; */        /* padding: 1px */        /* overflow: hidden; */        /* 以上任写一种即可解决问题 */        padding: 1px;    }    .son1 {        width: 200px;        height: 200px;        background-color: pink;        margin-top: 100px;    }</style>    <div class="father1">        <div class="son1">        </div>    </div><h3>3.8 清除内外边距</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">* {    margin: 0;    padding: 0;}</code></pre><p><strong class="red">注意：</strong><span class="red">行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了。</span></p><h2 id="title04">4. PS基本操作（略）</h2><p>因为网页没工大部分效果图都是利用PS（PhotoShop）来做的，所以以后我们大部分切图工作都是在PS里面完成。</p><h2 id="title05">5. 综合案例</h2><h3>5.1 案例1：产品模块</h3><p>案例布局分析如下：</p><img src="/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/02.jpg" alt="产品模块案例解读" title="产品模块案例解读"><p>案例代码如下:</p><pre class=" language-language-css"><code class="language-language-css">/* CSS */<style>    .outerSpace {        background-color: #f5f5f5;        width: 498px;        height: 615px;        overflow: hidden;    }    .xiaomiBox {        width: 298px;        height: 415px;        background-color: #fff;        margin: 100px auto;        overflow: hidden;    }        .xiaomiBox:hover {        width: 298px;        height: 415px;        background-color: #fff;        margin: 100px auto;        overflow: hidden;        box-shadow: 10px 10px 20px -5px rgb(0, 0, 0, .15);    }    .xiaomiBox img {        width: 100%;    }    .review {        height: 70px;        font-size: 14px;        /* 因为p段落标签没有width属性，所以padding不会撑开盒子的宽度 */        padding: 0 28px;        margin-top: 30px;        /* 若父元素包含了        overflow： hidden;         上两行可以直接用：        padding: 30px 28px;        替代 */    }    .review .reviewContent {        color: black;        text-decoration: none;    }    .appraise {        font-size: 12px;        color: #b0b0b0;        padding: 0 28px;        margin-top: 20px;    }    .info {        font-size: 14px;        margin-top: 15px;        padding: 0 28px;        color: #ebe4e0;    }    .info .productName {        display: inline-block;        font-weight: 400;        font-size: 14px;        margin-top: 0;    }    .info .name {        color: black;        text-decoration: none;    }    .info .splitLine {        margin: 0 6px 0 15px;    }    .info .price {        color: #ff6700;        font-weight: bold;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML --><body>    <div class='outerSpace'>        <div class='xiaomiBox'>            <img src='HTML学习笔记05/03.jpg' alt='产品图片' title='产品图片'>            <p class='review'><a href='#' class='reviewContent'>快递牛，整体不错蓝牙可以秒连。红米给力</a></p>            <div class='appraise'>来自于 117384232 的评价</div>            <div class='info'>                <h4 class='productName'><a href='#' class='name'>Redmi AirDots真无线蓝...</a></h4>                <span class='splitLine'>|</span>                <span class='price'> 99.9元</span>            </div>        </div>    </div><body></code></pre><p>显示效果如下：</p><style>    .outerSpace {        background-color: #f5f5f5;        width: 498px;        height: 615px;        overflow: hidden;    }    .xiaomiBox {        width: 298px;        height: 415px;        background-color: #fff;        margin: 100px auto;        overflow: hidden;    }        .xiaomiBox:hover {        width: 298px;        height: 415px;        background-color: #fff;        margin: 100px auto;        overflow: hidden;        box-shadow: 10px 10px 20px -5px rgb(0, 0, 0, .15);    }    .xiaomiBox img {        width: 100%;    }    .review {        height: 70px;        font-size: 14px;        /* 因为p段落标签没有width属性，所以padding不会撑开盒子的宽度 */        padding: 0 28px;        margin-top: 30px;        /* 若父元素包含了        overflow： hidden;         上两行可以直接用：        padding: 30px 28px;        替代 */    }    .review .reviewContent {        color: black;        text-decoration: none;    }    .appraise {        font-size: 12px;        color: #b0b0b0;        padding: 0 28px;        margin-top: 20px;    }    .info {        font-size: 14px;        margin-top: 15px;        padding: 0 28px;        color: #ebe4e0;    }    .info .productName {        display: inline-block;        font-weight: 400;        font-size: 14px;        margin-top: 0;    }    .info .name {        color: black;        text-decoration: none;    }    .info .splitLine {        margin: 0 6px 0 15px;    }    .info .price {        color: #ff6700;        font-weight: bold;    }</style>    <div class="outerSpace">        <div class="xiaomiBox">            <img src="/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/03.jpg" alt="产品图片" title="产品图片">            <p class="review"><a href="#" class="reviewContent">快递牛，整体不错蓝牙可以秒连。红米给力</a></p>            <div class="appraise">来自于 117384232 的评价</div>            <div class="info">                <h4 class="productName"><a href="#" class="name">Redmi AirDots真无线蓝...</a></h4>                <span class="splitLine">|</span>                <span class="price"> 99.9元</span>            </div>        </div>    </div><p><strong>总结：</strong></p><ol><li><p>布局为什么用不同盒子，我只想用div？<br><strong>答：</strong>标签都是有语义的，合理的地方用合理的标签。比如产品标题就用h标签，大量文字段落就用p标签</p></li><li><p>为什么用那么多类名？<br><strong>答：</strong>类名就是给每个盒子起了一个名字，可以更好地找到这个盒子，选取盒子更容易，后期维护也方便</p></li><li><p>到底用margin还是padding？<br><strong>答：</strong>大部分情况两个可以混用，两者各有优缺点，但是根据实际情况，总是有更简单的方法实现</p></li><li><p>自己做没有思路？<br><strong>答：</strong>布局有很多种实现方式，可以先模仿，然后再做出自己的风格</p></li></ol><h3>5.2 案例2：快报模块<p>案例布局分析如下：</p><img src="/2022/02/03/qian-duan-xue-xi/css/css-xue-xi-bi-ji-03/04.jpg"><p>代码如下：</p><pre class=" language-language-css"><code class="language-language-css"><style>    .newsTemplate {        margin: 0;        padding: 0;    }    .newsBox {        width: 248px;        height: 163px;        border: 1px solid #cccccc;        margin: 100px auto;        overflow: hidden;    }    .newsBox .titleOfNewsBox {        height: 32px;        border-bottom: 1px dotted #ccc;        font-size: 14px;        font-weight: 400;        line-height: 32px;        margin: 0 auto;        padding-left: 15px;    }    .newBox ul {        margin-top: 7px;        padding-left: 20px;    }    .newsBox ul li {        list-style: none;        height: 23px;        line-height: 23px;    }    .newsBox ul li a {        font-size: 12px;        color: #666;        text-decoration: none;    }    .newsBox ul li a:hover {        font-size: 12px;        color: #666;        text-decoration: underline;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><body class='newsTemplate'>    <div class='newsBox'>        <h3 class='titleOfNewsBox'>品优购快报</h3>        <ul>            <li><a href='#' >【特惠】爆款耳机5折秒！</a></li>            <li><a href='#'>【特惠】母亲节，健康好礼低至5折！</a></li>            <li><a href='#'>【特惠】爆款耳机5折秒！</a></li>            <li><a href='#'>【特惠】9.9元洗100张照片！</a></li>            <li><a href='#'>【特惠】长虹智能空调立省1000</a></li>        </ul>    </div></body></code></pre><p>显示效果如下：</p><style>    .newsTemplate {        margin: 0;        padding: 0;    }    .newsBox {        width: 248px;        height: 163px;        border: 1px solid #cccccc;        margin: 100px auto;        overflow: hidden;    }    .newsBox .titleOfNewsBox {        height: 32px;        border-bottom: 1px dotted #ccc;        font-size: 14px;        font-weight: 400;        line-height: 32px;        margin: 0 auto;        padding-left: 15px;    }    .newBox ul {        margin-top: 7px;        padding-left: 20px;    }    .newsBox ul li {        list-style: none;        height: 23px;        line-height: 23px;    }    .newsBox ul li a {        font-size: 12px;        color: #666;        text-decoration: none;    }    .newsBox ul li a:hover {        font-size: 12px;        color: #666;        text-decoration: underline;    }</style>    <div class="newsBox">        <h3 class="titleOfNewsBox">品优购快报</h3>        <ul>            <li><a href="#">【特惠】爆款耳机5折秒！</a></li>            <li><a href="#">【特惠】母亲节，健康好礼低至5折！</a></li>            <li><a href="#">【特惠】爆款耳机5折秒！</a></li>            <li><a href="#">【特惠】9.9元洗100张照片！</a></li>            <li><a href="#">【特惠】长虹智能空调立省1000</a></li>        </ul>    </div></h3><h2 id="title06">6. 圆角边框(重点)</h2><p>在CSS3中，新增<span class="red">圆角边框</span>样式，这样我们的盒子就可以变圆角了。</p><p><span class="red">border-radius</span>属性用于设置元素的外边框圆角。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">border-radius: length;</code></pre><p>radius：半径<br><span class="red">原理：</span>（椭）圆与边框的交集形成圆角效果</p><p>注意：</p><ul>    <li>参数值可以为<span class="red">数值</span>或者<span class="red">百分比</span>的形式</li>    <li>如果是<span class="red">正方形</span>，想要设置一个圆，把数值修改为<span class="red">高度或者宽度的一半</span>即可，或者直接写为<span class="red">50%</span></li>    <li><span class="red">如果是个矩形，设置为高度的一半可以形成两侧为半圆的矩形</span></li>    <li>该属性是一个<span class="red">简写属性</span>，可以跟4个值，分别代表<span class="red">左上角、右上角、右下角、左下角</span>（顺时针）</li>    <li>分开写：        <ul>            <li>border-top-left-radius</li>            <li>border-top-right-radius</li>            <li>border-bottom-right-radius</li>            <li>border-bottom-left-radius</li>        </ul>    </li></ul><table>    <tbody><tr><th>属性值个数</th><th>含义</th></tr>    <tr><td>border-radius: 5px;</td><td>1个值，代表所有圆角半径都是5像素</td></tr>    <tr><td>border-radius: 5px 10px;</td><td>2个值，代表左上角、右下角的圆角半径5像素，右上角、左下角的圆角半径10像素</td></tr>    <tr><td>border-radius: 5px 10px 20px</td><td>3个值，代表左上角的圆角半径5像素，右下角的圆角半径10像素，右上角、左下角的圆角半径20像素</td></tr>    <tr><td>border-radius: 5px 10px 20px 30px</td><td>4个值，左上角5像素，右上角10像素，右下角20像素，左下角30像素。（顺时针）</td></tr></tbody></table><p>示例代码如下：</p><pre class=" language-language-css"><code class="language-language-css"><style>    .cicleRect {        width: 300px;        height: 100px;        background-color: pink;        border-radius: 10px 20px 30px 40px;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><body>    <div class='cicleRect'></div></body></code></pre><p>显示效果如下：</p><style>    .cicleRect {        width: 300px;        height: 100px;        background-color: pink;        border-radius: 10px 20px 30px 40px;    }</style>    <div class="cicleRect"></div><h2 id="title07">7. 盒子阴影(重点)</h2><p>CSS3中新增了盒子阴影，我们可以使用<span class="red">box-shadow</span>属性为盒子添加阴影。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">box-shadow: h-shadow v-shadow blur spread color inset;</code></pre><table>    <tbody><tr><th>属性值</th><th>作用</th></tr>    <tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td></tr>    <tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td></tr>    <tr><td>blur</td><td>可选。模糊距离。</td></tr>    <tr><td>spread</td><td>可选。阴影的尺寸。</td></tr>    <tr><td>color</td><td>可选。阴影的颜色。请参阅CSS的颜色值。</td></tr>    <tr><td>inset</td><td>可选。将外部阴影[outset]改为内部阴影。</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li><span class="red">默认的是外阴影（outset）</span>，但是不可以写这个单词，否则导致阴影失效</li><li><span class="red">盒子阴影不占用空间</span>，不会影响其他盒子排列</li></ol><h2 id="title08">8. 文字阴影</h2><p>CSS3中，可以使用<span class="red">text-shadow</span>属性将阴影应用于文本</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">text-shadow: h-shadow v-shadow blur color;</code></pre><table>    <tbody><tr><th>属性值</th><th>作用</th></tr>    <tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td></tr>    <tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td></tr>    <tr><td>blur</td><td>可选。模糊距离。</td></tr>    <tr><td>color</td><td>可选。阴影的颜色。请参阅CSS的颜色值。</td></tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记Part02</title>
      <link href="/2022/01/29/qian-duan-xue-xi/css/css-xue-xi-bi-ji-02/"/>
      <url>/2022/01/29/qian-duan-xue-xi/css/css-xue-xi-bi-ji-02/</url>
      
        <content type="html"><![CDATA[<h1>CSS学习笔记 Part02</h1><h2 id="目录">目录</h2><ol><li>Emmet语法</li><li>CSS的复合选择器</li><li>CSS的元素显示模式</li><li>CSS的背景</li></ol><span id="more"></span><h2 id="1-Emmet语法">1. Emmet语法</h2><p>Emmet语法的前身是Zen coding，它使用缩写来提高html/css的编写速度，VSCode内部已经集成了该语法。</p><h3 id="1-1-快速生成HTML结构语法">1.1 快速生成HTML结构语法</h3><ol><li>生成标签：直接输入标签名，按tab键即可。比如 div 然后tab键，就可以生成&lt;div&gt;&lt;/div&gt;</li><li>如果想要生成多个相同标签，加上*就可以了。比如 div*3，就可以快速生成3个div</li><li>如果有父子级关系（包含关系）的标签，可以用 &gt; 。比如ul&gt;li就可以了</li><li>如果有兄弟级关系（并列关系）的标签，用 + 就可以了。比如 div+p</li><li>如果生成带有类名或者id名字的，直接写 .demo 或者 #two tab键就可以了</li><li>如果生成的div类名是有顺序的，可以用自增符号 $，并配合*与数字</li><li>如果想要在生成的标签内部写内容可以用{}表示</li></ol><h3 id="1-2-快速生成CSS语法样式">1.2 快速生成CSS语法样式</h3><p>CSS基本采取简写形式即可。</p><ol><li>比如w200 按tab键。生成：width: 200px;</li><li>比如lh26 按tab键。生成：line-height: 26px;</li></ol><h3 id="1-3-快速格式化代码">1.3 快速格式化代码</h3><p>VSCode快速格式化代码：Shift-Alt-F</p><p><strong>可设置当我们保存页面的时候自动格式化代码：</strong></p><p>旧版本VSCode：</p><ol><li>文件-首选项-设置</li><li>搜索emmet.include;</li><li>在settings.json下的【用户】中添加以下语句：<blockquote><p>“editor.formatOnType”:true,<br>“editor.formatOnSave”:true<br>只需要设置一次即可，以后都可以自动保存格式化代码</p></blockquote></li></ol><p>新版本VSCode：</p><ol><li>文件-首选项-设置</li><li>搜索format</li><li>勾选Editor:Format On Save</li></ol><h2 id="2-CSS的复合选择器">2. CSS的复合选择器</h2><h3 id="2-1-什么是复合选择器">2.1 什么是复合选择器</h3><p>在CSS中，可以根据选择器的类型把选择器分为<span style="color: red">基础选择器</span>和<span style="color: red">复合选择器</span>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。</p><ul><li>复合选择器可以更准确、更高效地选择目标元素（标签）</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成</li><li>常用的复合选择器包括：后代选择器、字选择器、并集选择器、伪类选择器等等</li></ul><h3 id="2-2-后代选择器（重要）">2.2 后代选择器（重要）</h3><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素。其语法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">元素1 元素2 { 样式声明 }</code></pre><p>上述语法表示<strong>选择元素1里面的所有元素2</strong>（后代元素）</p><p>例如：</p><pre class=" language-language-css"><code class="language-language-css">ul li { 样式声明 } /* 选择ul里面所有的li标签元素 */</code></pre><p><strong>注意：</strong></p><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是<strong>元素2</strong></li><li>元素2 可以是儿子，也可以是孙子，只要是元素1的后代即可，并且可以一直嵌套。</li><li>元素1 和 元素2 可以是任意基础选择器</li></ul><h3 id="2-3-子选择器（重要）">2.3 子选择器（重要）</h3><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">元素1 > 元素2 { 样式声明 }</code></pre><p>上述语法表示<strong>选择元素1里面的所有直接后代（子元素）元素2</strong></p><p><strong>注意：</strong></p><ul><li>元素1 和 元素2 中间用<strong>大于号</strong>隔开</li><li>元素1 是父级， 元素2 是子级，最终选择的是<strong>元素2</strong></li><li>元素2 必须是<strong>亲儿子</strong>，其孙子等不会被选择</li></ul><h3 id="2-4-并集选择器（重要）">2.4 并集选择器（重要）</h3><p>并集选择器可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明。</p><p>并集选择器是通过**英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><p>语法：</p><pre class=" language-language-css"><code class="language-language-css">元素1, 元素2 { 样式声明 }</code></pre><p>上述语法表示选择<strong>元素1和元素2</strong></p><p>例如：</p><pre class=" language-language-css"><code class="language-language-css">ul, div {     样式声明 } /* 选择ul和div标签元素 */</code></pre><p><strong>注意：</strong></p><ul><li>元素1 和 元素2 中间用英文逗号隔开</li><li>最后一个选择器不需要加逗号</li><li>并集选择器一般竖着写</li><li>逗号可以理解为<strong>和</strong>的意思</li><li>并集选择器通常用于集体声明</li></ul><h3 id="2-5-伪类选择器">2.5 伪类选择器</h3><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个元素，第n个元素。</p><p>伪类选择器书写最大的特点是用**冒号（:）**表示，比如： :hover 、:first-child等。</p><p>伪类选择器很多，比如有链接伪类、结构伪类等。本节只介绍常用的链接伪类选择器。</p><h4 id="2-5-1-链接伪类选择器">2.5.1 链接伪类选择器</h4><pre class=" language-language-css"><code class="language-language-css">a:link      /* 选择所有未被访问的链接 */a:visited   /* 选择所有已被访问的链接 */a:hover     /* 选择鼠标指针位于其上的链接 */a:active    /* 选择活动链接（鼠标按下未弹起的链接） */</code></pre><p><strong>注意：</strong></p><ol><li>为了确保生效，请按照<strong style="color: red">LVHA</strong>的顺序声明:link - :visited - :hover - :active</li><li>记忆法：love hate 或者 lv hao</li><li>因为a链接标签在浏览器中有默认样式，所以实际工作中都需要给链接单独制定样式</li></ol><p><strong>链接伪类选择器实际工作开发中的写法：</strong></p><pre class=" language-language-css"><code class="language-language-css">/* a 是标签选择器 所有的标签 */a {    color: gray;}/* :hover 是链接伪类选择器 鼠标经过 */a:hover {    color: red;     /* 鼠标经过的时候，从原来的灰色变成了红色 */}</code></pre><h4 id="2-5-2-focus伪类选择器">2.5.2 :focus伪类选择器</h4><p><span style="color: red">:focus伪类选择器</span>用于选取获得焦点的表单元素。</p><p>焦点就是光标，一般情况&lt;input&gt;类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p><pre class=" language-language-css"><code class="language-language-css">input:focus {    background-color: yellow;}</code></pre><h3 id="2-6-复合选择器总结">2.6 复合选择器总结</h3><table>    <tbody><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr>    <tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr>    <tr><td>子代选择器</td><td>选择最近一级元素</td><td>只能选亲儿子</td><td>较少</td><td>符号是<strong>大于号</strong> .nav&gt;p</td></tr>    <tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr>    <tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住 a{} 和 a:hover 实际开发的写法</td></tr>    <tr><td>:focus伪类选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><h2 id="3-CSS的元素显示模式">3. CSS的元素显示模式</h2><h3 id="3-1-什么是元素显示模式">3.1 什么是元素显示模式</h3><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以<strong>更好地布局我们的网页</strong>。</p><p>元素显示模式就是元素（标签）以什么方式进行显示，比如&lt;div&gt;自己占一行，比如一行可以放多个&lt;span&gt;</p><p>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</p><h3 id="3-2-块元素">3.2 块元素</h3><p>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</p><p>块级元素的<strong>特点：</strong></p><ol><li>独占一行</li><li>高度、宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li></ol><p><strong>注意：</strong></p><ul><li>文字类的元素内不能使用块级元素</li><li>&lt;p&gt;标签主要用于存放文字，因此&lt;p&gt;里面不能存放块级元素，特别是不能放&lt;div&gt;</li><li>同理，&lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h3 id="3-3-行内元素">3.3 行内元素</h3><p>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><p>行内元素的<strong>特点：</strong></p><ol><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或者其他行内元素</li></ol><p><strong>注意：</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接标签&lt;a&gt;里面可以放块级元素，当时给&lt;a&gt;转换一下块级模式最安全</li></ul><h3 id="3-4-行内块元素">3.4 行内块元素</h3><p>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，他们同时具有块元素和行内元素的特点。有些资料称他们为行内块元素。</p><p>行内块元素的<strong>特点：</strong></p><ol><li>和相邻行内元素（行内块）在一行上，但他们之间会有空白缝隙，一行可以显示多个（行内元素的特点）</li><li>默认高度就是它本身内容的宽度（行内元素的特点）</li><li>高度、行高、外边距以及内边距都可以控制（块级元素的特点）</li></ol><h3 id="3-5-元素显示模式总结">3.5 元素显示模式总结</h3><table>    <tbody><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr>    <tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr>    <tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或者其他行内元素</td></tr>    <tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td> </td></tr></tbody></table><h3 id="3-6-元素显示模式转换">3.6 元素显示模式转换</h3><p>特殊情况下，我们需要元素模式的转换，简单理解：一个模式的元素需要另外一种模式的特性<br>比如想要增加链接&lt;a&gt;的触发范围</p><p>转换为<strong>块级元素</strong>：    <strong>display:block;</strong><br>转换为<strong>行内元素</strong>：    <strong>display:inline;</strong><br>转换为<strong>行内块元素</strong>：  <strong>display:inline-block</strong></p><h3 id="3-7-一个小工具的使用-Snipaste">3.7 一个小工具的使用 Snipaste</h3><p>Snipaste是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p><p>常用快捷方式：</p><ol><li>F1可以截图。同时测量大小、设置箭头、书写文字等</li><li>F3在桌面置顶显示</li><li>点击图片，alt可以取色（按下shift可以切换取色模式）</li><li>按下esc取消图片显示</li></ol><h3 id="3-8-案例：简洁版小米侧边栏">3.8 案例：简洁版小米侧边栏</h3><p>案例核心思路：</p><ol><li>把链接a转换为块级元素，则链接可以独占一行，并且有宽度和高度</li><li>鼠标经过链接a时，给链接设置背景颜色</li><li>单行文字垂直居中的代码<ul><li>CSS没有提供文字垂直居中的代码</li><li>让文字的行高等于盒子的高度，即可实现文字在当前盒子内垂直居中</li><li>原理：行高=上空隙+文字本身高度+下空隙</li><li>代码：line-height: (height);</li><li>如果行高小于盒子高度，文字则会偏上；如果行高大于盒子高度，文字则会偏下</li></ul></li></ol><p>代码如下：</p><pre class=" language-language-css"><code class="language-language-css">/* CSS代码部分 */<style>    .nav a {        display: block;        width: 230px;        height: 40px;        background-color: #55585a;        font-size: 14px;        color: white;        text-decoration: none;        text-indent: 2em;        line-height: 40px;    }    .nav a:hover {        background-color: orange;        color: white;    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML代码部分 --><body>    <div class="nav">        <a href="#">手机 电话卡</a>        <a href="#">电视 盒子</a>        <a href="#">笔记本 平板</a>        <a href="#">出行 穿戴</a>        <a href="#">智能 路由器</a>        <a href="#">健康 儿童</a>        <a href="#">耳机 音响</a>    <div><body></code></pre><p>显示效果如下：</p><style>    .nav a {        display: block;        width: 230px;        height: 40px;        background-color: #55585a;        font-size: 14px;        color: white;        text-decoration: none;        text-indent: 2em;        line-height: 40px;    }    .nav a:hover {        background-color: orange;        color: white;    }</style>    <div class="nav">        <a href="#">手机 电话卡</a>        <a href="#">电视 盒子</a>        <a href="#">笔记本 平板</a>        <a href="#">出行 穿戴</a>        <a href="#">智能 路由器</a>        <a href="#">健康 儿童</a>        <a href="#">耳机 音响</a>    <div><h2 id="4-CSS的背景">4. CSS的背景</h2><p>通过CSS背景属性，可以给页面元素添加背景样式。</p><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><h3 id="4-1-背景颜色">4.1 背景颜色</h3><p><strong>backgroud-color</strong>属性定义了元素的背景颜色。</p><pre class=" language-language-css"><code class="language-language-css">background-color: 颜色值;</code></pre><p>一般情况下，元素背景颜色默认值是<strong>transparent</strong>（透明），我们也可以手动指定背景颜色为透明色。</p><h3 id="4-2-背景图片">4.2 背景图片</h3><p><strong>background-image</strong>属性描述了元素的背景图片。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片。优点是非常便于控制位置。（精灵图也是一种运用场景）</p><p>页面元素既可以添加背景颜色，也可以添加背景图片，只不过背景图片会在背景颜色图层之上。</p><pre class=" language-language-css"><code class="language-language-css">background-image: none | url(ulr);</code></pre><table>    <tbody><tr><th style="text-align: left;">参数值</th><th style="text-align: left;">作用</th></tr>    <tr><td>none</td><td>无背景图（默认值）</td></tr>    <tr><td>url</td><td>使用绝对或者相对地址指定背景图片</td></tr></tbody></table><h3 id="4-3-背景平铺">4.3 背景平铺</h3><p>如果需要在HTML页面对背景图片进行平铺，可以使用<strong>background-repeat</strong>属性。</p><p>默认情况下，背景图片是平铺的。</p><pre class=" language-language-css"><code class="language-language-css">background-repeat: repeat | no-repeat | repeat-x | repeat-y</code></pre><table>    <tbody><tr><th>参数值</th><th style="text-align: left;">作用</th></tr>    <tr><td>repeat</td><td>背景图片在纵向和横向上平铺（默认值）</td></tr>    <tr><td>no-repeat</td><td>背景图片不平铺</td></tr>    <tr><td>repeat-x</td><td>背景图片在横向上平铺</td></tr>    <tr><td>repeat-y</td><td>背景图片在纵向上平铺</td></tr></tbody></table><h3 id="4-4-背景图片位置">4.4 背景图片位置</h3><p>利用<strong>background-position</strong>属性可以改变图片在背景中的位置。</p><pre class=" language-language-css"><code class="language-language-css">background-position: x y;</code></pre><p>参数x、y代表：x坐标、y坐标。可以使用<strong>方位名词</strong>或者<strong>精确单位</strong></p><table>    <tbody><tr><th style="text-align: left">参数值</th><th style="text-align: left">说明</th></tr>    <tr><td>length</td><td>百分数 | 由浮点数和单位标识符组成的长度值</td></tr>    <tr><td>position</td><td>top | center | bottom | left | center | right 方位名词</td></tr></tbody></table><ol><li><p>参数是方位名词</p><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul></li><li><p>参数是精确单位</p><ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li></ul></li><li><p>参数是混合单位</p><ul><li>如果两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第一个值是y坐标</li><li>若两者相互矛盾，如：20px left; 则图片默认位于左上角</li></ul></li></ol><h3 id="4-5-背景图像固定（背景附着）">4.5 背景图像固定（背景附着）</h3><p><strong>background-attachment</strong>属性设置背景图片是否固定或者随着页面的其余部分滚动。</p><p>background-attachment后期可以制作时差滚动的效果。</p><pre class=" language-language-css"><code class="language-language-css">background-attachment: scroll | fixed;</code></pre><table>    <tbody><tr><th style="text-align: left">参数</th><th style="text-align: left">作用</th></tr>    <tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr>    <tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="4-6-背景复合写法">4.6 背景复合写法</h3><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性<strong>background</strong>中。从而节约代码量。</p><p>当书写简写属性时，没有特定的书写顺序，但一般习惯约定顺序为：</p><p>background: 背景颜色 背景图片地址 背景平铺 背景图片滚动 背景图片位置</p><h3 id="4-7-背景色半透明">4.7 背景色半透明</h3><p>CSS3为我们提供了背景颜色半透明的效果</p><pre class=" language-language-css"><code class="language-language-css">background: rgba(0, 0, 0, 0.3);</code></pre><p><strong>注意：</strong></p><ul><li>最后一个参数时alpha透明度，取值范围在0~1之间</li><li>我们习惯把0.3的0省略掉，写为<code>background: rgba(0, 0, 0, .3);</code></li><li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3新增属性，是IE9+版本浏览器才支持</li><li>在实际开发中，不太关注兼容性写法，放心使用</li></ul><h3 id="4-8-背景总结">4.8 背景总结</h3><table>    <tbody><tr style="text-align: left"><th>属性</th><th>作用</th><th>值</th></tr>    <tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr>    <tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr>    <tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-x/repeat-y</td></tr>    <tr><td>background-position</td><td>背景位置</td><td>length/position 分别是 x 和 y 坐标</td></tr>    <tr><td>background-attachment</td><td>背景附着</td><td>scroll（背景滚动）/fixed（背景固定）</td></tr>    <tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr>    <tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background: rgba(0,0,0,0.3);  后面必须是4个值</td></tr></tbody></table><p>背景图片：实际开发常见于logo或者一些装饰性的小图片或者超大的背景图片，优点是非常便于控制位置。（精灵图也是一种运用场景）</p><h3 id="4-9-综合案例">4.9 综合案例</h3><p>案例：五彩导航</p><p>练习价值：</p><ol><li>链接属于行内元素，但是此时需要高度、宽度，因此需要模式转换</li><li>里面文字需要水平居中和垂直居中，因此需要单行文字垂直居中代码</li><li>链接里面需要设置背景图片，因此需要用到背景的相关属性设置</li><li>鼠标经过变化背景图片，因此需要用到链接伪类选择器</li></ol><pre class=" language-language-css"><code class="language-language-css">/* CSS代码部分 */<style>    .nav a {        display: inline-block;        /* display: block; */        width: 120px;        height: 58px;        background-color: black;        text-align: center;        line-height: 48px;        color: white;        text-decoration: none;    }    .nav .bg1 {        background: url(images/bg1.png)    }    .nav .bg1:hover {        background: url(images/bg11.png)    }    .nav .bg2 {        background: url(images/bg2.png);    }    .nav .bg2:hover {        background: url(images/bg22.png);    }    .nav .bg3 {        background: url(images/bg3.jpg);    }    .nav .bg3:hover {        background: url(images/bg3.png);    }    .nav .bg4 {        background: url(images/bg4.png);    }    .nav .bg4:hover {        background: url(images/bg11.png);    }    .nav .bg5 {        background: url(images/bg5.png);    }    .nav .bg5:hover {        background: url(images/bg22.png);    }</style></code></pre><pre class=" language-language-html"><code class="language-language-html"><!-- HTML代码部分 --><div class="nav">    <a href="#" class="bg1">导航栏1</a>    <a href="#" class="bg2">导航栏2</a>    <a href="#" class="bg3">导航栏3</a>    <a href="#" class="bg4">导航栏4</a>    <a href="#" class="bg5">导航栏5</a></div></code></pre><p>显示效果如下：(此为图片)<br><img src="/2022/01/29/qian-duan-xue-xi/css/css-xue-xi-bi-ji-02/nav_rainbow.jpg" alt="五彩导航栏" title="五彩导航栏"></p></div></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记Part01</title>
      <link href="/2022/01/28/qian-duan-xue-xi/css/css-xue-xi-bi-ji-01/"/>
      <url>/2022/01/28/qian-duan-xue-xi/css/css-xue-xi-bi-ji-01/</url>
      
        <content type="html"><![CDATA[<h1>CSS学习笔记 Part01</h1><p><strong>目录</strong></p><ol><li>CSS简介</li><li>CSS基础选择器</li><li>CSS字体属性</li><li>CSS文本属性</li><li>CSS的引入方式</li><li>综合案例</li><li>Chrome调试工具</li></ol><span id="more"></span><h2 id="1-CSS简介">1. CSS简介</h2><p>CSS的主要使用场景就是美化网页，布局页面的。</p><h3 id="1-1-HTML的局限性">1.1 HTML的局限性</h3><p>HTML<strong>只关注内容的语义</strong>。比如&lt;h1&gt;表明这是一个大标题，&lt;p&gt;表明这是一个段落，&lt;img&gt;表明这儿有一个图片，&lt;a&gt;表明此处有链接。</p><p>早期网站共同特点：丑</p><p>虽然HTML可以做简单的样式，但是带来的是无尽的臃肿和繁琐……</p><h3 id="1-2-CSS-网页的美容师">1.2 CSS-网页的美容师</h3><p>CSS是<strong>层叠样式表（Cascading Style Sheets）</strong>的简称。</p><p>有时我们也会称之为CSS样式表或级联样式表。</p><p>CSS也是一种标记语言。</p><p>CSS主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外/观显示样式。</p><p>CSS让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS可以美化HTML，让HTML更漂亮，让页面布局更简单。</p><p><strong>总结：</strong></p><ol><li>HTML主要做结构，显示元素内容</li><li>CSS美化HTML，布局网页</li><li>CSS最大价值：有HTML专注去做结构呈现，样式交给CSS，即结构（HTML）与样式（CSS）相分离</li></ol><h3 id="1-3-CSS语法规范">1.3 CSS语法规范</h3><p>CSS规则由两个主要的部分构成：选择器以及一条或多条声明。例如：</p><pre class=" language-language-css"><code class="language-language-css">h1 {    color: red;    font-size: 26px;}</code></pre><p><strong>注意：</strong></p><ol><li>选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式</li><li>属性和属性值以"键值对"的形式出现</li><li>属性是对指定对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文":"分开</li><li>多个"键值对"之间用英文";"进行区分</li></ol><h3 id="1-4-CSS代码风格">1.4 CSS代码风格</h3><p>符合实际开发的书写方式：</p><ol><li>样式格式书写</li><li>样式大小写</li><li>空格规范</li></ol><h4 id="1-4-1-样式格式书写">1.4.1 样式格式书写</h4><ol><li><p>紧凑格式</p><blockquote><pre class=" language-language-css"><code class="language-language-css">h3 { color: deeppink; font-size: 20px;}</code></pre></blockquote></li><li><p>展开格式</p><blockquote><pre class=" language-language-css"><code class="language-language-css">h3 {    color: pink;    font-size: 20px;}</code></pre></blockquote></li></ol><p>建议使用<strong>展开格式</strong>，因为更直观</p><h4 id="1-4-2-样式大小写">1.4.2 样式大小写</h4><ol><li><p>小写形式</p><blockquote><pre class=" language-language-css"><code class="language-language-css">h3 {    color: pink;}</code></pre></blockquote></li><li><p>大写形式</p><blockquote><pre class=" language-language-css"><code class="language-language-css">H3 {    COLOR: PINK;}</code></pre></blockquote></li></ol><p>建议样式选择器、属性名、属性值关键字<strong>全部使用小写字母</strong>，特殊情况除外</p><h4 id="1-4-3-空格规范">1.4.3 空格规范</h4><blockquote><pre class=" language-language-css"><code class="language-language-css">h3 {    color: pink;}</code></pre></blockquote><ol><li>选择器（标签）和花括号中间保留一个空格</li><li>属性值前面，冒号后面，保留一个空格</li></ol><h2 id="2-CSS基础选择器">2. CSS基础选择器</h2><h3 id="2-1-CSS选择器的作用">2.1 CSS选择器的作用</h3><p>选择器（选择符）就是根据不同需求把不同的标签选出来。简单来说，就是选择标签用的。</p><pre class=" language-language-css"><code class="language-language-css">h1 {    color: red;    font-size: 26px;}</code></pre><p>以上CSS做了两件事：</p><ol><li>找到了所有的h1标签/选择器。（选对人）</li><li>设置这些标签的样式，比如字体颜色改为红色，字体大小改为26像素。（做对事）</li></ol><h3 id="2-2-选择器分类">2.2 选择器分类</h3><p>选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>两个大类，本节讲解基础选择器。</p><p>基础选择器是由单个选择器组成的。</p><p>基础选择器包括：标签选择器、类选择器、id选择器、通配符选择器</p><h3 id="2-3-标签选择器">2.3 标签选择器</h3><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><p><strong>语法：</strong></p><blockquote><p>标签名 {<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3: 属性值3;<br>……<br>}</p></blockquote><p><strong>作用：</strong><br>标签选择器可以把某一类标签全部选择出来，比如所有的&lt;div&gt;标签和所有的&lt;span&gt;标签。</p><p><strong>优点：</strong><br>能快速为页面中同类型的标签统一设置样式。</p><p><strong>缺点：</strong><br>不能设计差异化样式，只能选择全部的当前标签。</p><h2 id="3-CSS字体属性">3. CSS字体属性</h2><p>CSS Fonts（字体）属性用于定义字体系列、大小、粗细、文本样式（如斜体等）。</p><h3 id="3-5-字体复合属性">3.5 字体复合属性</h3><p>字体属性可以把以上文字样式综合来写，以节约代码。</p><pre class=" language-language-css"><code class="language-language-css">body {    font: font-style font-weight font-size/line-height font-family;}</code></pre><p><strong>注意：</strong></p><ul><li>使用font属性时，必须按照上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间以<strong>空格</strong>隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留<strong>font-size</strong>和<strong>font-family</strong>属性，否则font属性将不再起作用</li></ul><h2 id="4-CSS文本属性">4. CSS文本属性</h2><p>CSS Text（文本）属性可以定义文本的<strong>外观</strong>，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><h3 id="4-1-文本颜色">4.1 文本颜色</h3><p>color 属性用于定义文本的颜色。</p><pre class=" language-language-css"><code class="language-language-css">div {    color: red;}</code></pre><table><thead><tr><th>颜色表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色</td><td>red，green，blue，pink等</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600，#29D794等</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)等</td></tr></tbody></table><p>开发中最常用的是十六进制。</p><h3 id="4-2-对齐文本">4.2 对齐文本</h3><p>text-align属性用于设置元素内文本内容的水平对齐方式</p><pre class=" language-language-css"><code class="language-language-css">div {    text-align: center;}</code></pre><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="4-3-装饰文本">4.3 装饰文本</h3><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线。</p><pre class=" language-language-css"><code class="language-language-css">div {    text-decoration: underline;}</code></pre><table>    <tbody><tr><th>属性值</th><th>描述</th></tr>    <tr><td>none</td><td>默认。没有装饰线（最常用）</td></tr>    <tr><td>underline</td><td>下划线。链接a自带下划线（常用）</td></tr>    <tr><td>overline</td><td>上划线。（几乎不用）</td></tr>    <tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><h3 id="4-4-文本缩进">4.4 文本缩进</h3><p>text-indent属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p><pre class=" language-language-css"><code class="language-language-css">div {    text-indent: 10px;}</code></pre><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p><pre class=" language-language-css"><code class="language-language-css">p {    text-decoration: 2em;}</code></pre><p>em是一个相对单位，就是当前元素（font-size）1个文字的大小，如果当前元素没有设置大小，则会按照父元素的1个文字大小。</p><h3 id="4-5-行间距">4.5 行间距</h3><p>line-height属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离。</p><pre class=" language-language-css"><code class="language-language-css">p {    line-height: 26px;}</code></pre><p>行间距的组成：上间距、文本高度、下间距</p><h3 id="4-6-文本属性总结">4.6 文本属性总结</h3><table>    <tbody><tr><th>属性</th><th>表示</th><th>注意点</th></tr>    <tr><td>color</td><td>文本颜色</td><td>我们通常用 十六进制 比如 而且是简写形式 #fff</td></tr>    <tr><td>text-align</td><td>文本对齐</td><td>可以设定文字水平的对齐方式</td></tr>    <tr><td>text-indent</td><td>文本缩进</td><td>通常我们用于段落首行缩进2个字的距离 text-indent: 2em;</td></tr>    <tr><td>text-decoration</td><td>文本修饰</td><td>记住 添加下划线：underline 取消下划线：none</td></tr>    <tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><h2 id="5-CSS的引入方式">5. CSS的引入方式</h2><h3 id="5-1-CSS的三种样式表">5.1 CSS的三种样式表</h3><p>按照CSS样式表书写的位置（或引入的方式），CSS样式表可以分为三大类：</p><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h4 id="5-1-1-行内样式表">5.1.1 行内样式表</h4><p>行内样式表（内联样式表）是在元素标签内部的style属性中设置CSS样式。适合于修改简单样式。</p><pre class=" language-language-css"><code class="language-language-css"><div style="color: red; font-size: 12px;">青春不常在，抓紧谈恋爱</div></code></pre><p><strong>注意：</strong></p><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>由于书写繁琐，并且没有体现出结构与样式分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</li><li>使用行内样式表设定CSS，通常也被成为<span style="color: red">行内式引入</span></li></ul><h4 id="5-1-2-内部样式表">5.1.2 内部样式表</h4><p>内部样式表（内嵌样式表）是写到html页面内部。是将所有的CSS代码抽取出来，单独放到一个&lt;style&gt;标签中</p><pre class=" language-language-css"><code class="language-language-css"><style>    div {        color: red;        font-size: 12px;    }</style></code></pre><p><strong>注意：</strong></p><ul><li>&lt;style&gt;标签理论上可以放在HTML文档的任何地方，但一般会放在文档的&lt;head&gt;标签中。</li><li>通过此种方式，可以方便控制<strong>当前整个页面中</strong>的元素样式设置。</li><li>代码结构清晰，但是并没有实现结构与样式完全分离。</li><li>使用内部样式表设定CSS，通常也被称为<span style="color: red;">嵌入式引入</span>，这种方式是我们练习时常用的方式</li></ul><h4 id="5-1-3-外部样式表">5.1.3 外部样式表</h4><p>实际开发都是外部样式表，适合于样式比较多的情况。核心是：样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用。</p><p>引入外部样式表步骤：</p><ol><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放入此文件中。</li><li>在HTML页面中，使用&lt;link&gt;标签引入这个CSS文件</li></ol><pre class=" language-language-html"><code class="language-language-html"><link rel="stylesheet" href="css文件路径"></code></pre><table>    <tbody><tr><th>属性</th><th>作用</th></tr>    <tr><td>rel</td><td>定义当前文档与被链接文档之前的关系，在这里需要指定为"stylesheet"，表示被链接的文档是一个样式表文件。</td></tr>    <tr><td>href</td><td>定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径</td></tr></tbody></table><h3 id="5-2-CSS引入方式总结">5.2 CSS引入方式总结</h3><table>    <tbody><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr>    <tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr>    <tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr>    <tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，吐血推荐</td><td>控制多个页面</td></tr></tbody></table><h2 id="6-综合案例">6. 综合案例</h2><p>制作页面整体步骤：</p><ol><li>搭建HTML结构页面</li><li>修改CSS样式</li></ol><p>具体略</p><h2 id="7-调试工具">7. 调试工具</h2><p>浏览器提供了调试工具，可以用来调试HTML结构和CSS样式</p><h3 id="7-1-打开调试工具">7.1 打开调试工具</h3><p>打开浏览器（IE、Chrome……），按下<span style="color: red">F12键</span>或者<span style="color: red">右击页面空白处→检查</span></p><h3 id="7-2-使用调试工具">7.2 使用调试工具</h3><ol><li><span style="color: red">Ctrl+滚轮</span>可以放大开发者工具代码大小</li><li>一边为HTML元素结构，另一侧为CSS样式</li><li>CSS样式可以改动数值（左右箭头或者直接输入）和查看颜色</li><li><span style="color: red">Ctrl+0</span>复原浏览器/调试工具缩放大小</li><li>如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误</li><li>如果有样式，但是样式前面有<span style="color: red">黄色叹号提示</span>，则是样式属性书写错误</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记Part02</title>
      <link href="/2022/01/27/qian-duan-xue-xi/html/html-xue-xi-bi-ji-02/"/>
      <url>/2022/01/27/qian-duan-xue-xi/html/html-xue-xi-bi-ji-02/</url>
      
        <content type="html"><![CDATA[<h1>HTML学习笔记 Part02-HTML标签（下）</h1><p><strong>目录</strong></p><ol><li>表格标签</li><li>列表标签</li><li>表单标签</li><li>综合案例</li><li>查阅文档</li></ol><span id="more"></span><h2 id="1-表格标签">1. 表格标签</h2><p>表格是实际开发中非常常用的标签。</p><h3 id="1-1-表格的主要作用">1.1 表格的主要作用</h3><p>表格主要用于<strong>显示、展示数据</strong>，因为它可以让数据显示得非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p><p>表格不是用来布局页面的，而是用来<strong>展示数据</strong>的。</p><h3 id="1-2-表格的基本语法">1.2 表格的基本语法</h3><pre class=" language-language-html"><code class="language-language-html"><table>    <tr>        <td>单元格内的文字</td>        ...    </tr>    ...</table></code></pre><ol><li>&lt;table&gt;&lt;/table&gt;是用于定义表格的标签。</li><li>&lt;tr&gt;&lt;/tr&gt;标签用于定义表格中的行，必须嵌套在&lt;table&gt;&lt;/table&gt;标签中。<ul><li>字母tr指表格行（table row）。</li></ul></li><li>&lt;td&gt;&lt;/td&gt;标签用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。<ul><li>字母td指表格数据（table data），即数据单元格的内容。</li></ul></li></ol><table>        <tbody><tr><td>姓名</td>  <td>性别</td> <td> 年龄 </td></tr>        <tr><td>刘德华</td>  <td>男</td> <td> 56 </td></tr>        <tr><td>张学友</td>  <td>男</td> <td> 58 </td></tr>        <tr><td>郭富城</td>  <td>男</td> <td> 51 </td></tr>        <tr><td>黎明</td>  <td>男</td> <td> 57 </td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记Part01</title>
      <link href="/2022/01/26/qian-duan-xue-xi/html/html-xue-xi-bi-ji-01/"/>
      <url>/2022/01/26/qian-duan-xue-xi/html/html-xue-xi-bi-ji-01/</url>
      
        <content type="html"><![CDATA[<h1>HTML学习笔记 Part01-HTML标签（上）</h1><p><strong>目录</strong></p><ol><li>HTML语法规范</li><li>HTML基本结构标签</li><li>网页开发工具</li><li>HTML常用标签</li><li>HTML中的注释和特殊字符</li></ol><span id="more"></span><h2 id="1-HTML语法规范">1. HTML语法规范</h2><p>略</p><h2 id="2-HTML基本结构标签">2. HTML基本结构标签</h2><p>略</p><h2 id="3-网页开发工具">3. 网页开发工具</h2><h3 id="VSCode工具生成骨架标签新增代码">VSCode工具生成骨架标签新增代码</h3><ol><li>标签</li><li>lang语言</li><li>charset字符集</li></ol><h3 id="3-1-文档类型声明标签">3.1 文档类型声明标签</h3>文档声明类型，作用就是告诉浏览器使用哪种HTML版本来显示网页<pre class=" language-language-html"><code class="language-language-html"><!DOCTYPE html></code></pre><p><strong>这句代码的意思是：当前页面采取的是HTML5版本来显示网页</strong></p><p><strong>注意：</strong></p><ol><li>声明位于文档中的最前面的位置，处于&lt; html &gt;标签之前</li><li>不是一个HTML标签，它就是文档类型声明标签</li></ol><h3 id="3-2-lang语言种类">3.2 lang语言种类</h3><p><code>&lt;html lang="zh-CN"&gt;</code></p><ol><li>en定义语言为英语</li><li>zh-CN定义语言为中文</li></ol><p>简单来说，定义为en就是英文网页，定义为zh-CN就是中文网页</p><p>其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</p><p>这个属性对于浏览器和搜索引擎（百度、谷歌等）还是有作用的</p><h3 id="3-3-字符集">3.3 字符集</h3><p>字符集（Character set）是多个字符的集合，以便于计算机能够识别和存储各种文字。</p><p>在<code>&lt;head&gt;</code>标签内，可以通过<code>&lt;meta&gt;</code>标签的<code>charset</code>属性来规定HTML文档应该使用哪种字符编码。</p><pre class=" language-language-html"><code class="language-language-html"><meta charset="UTF-8"></code></pre><p>charset常用的值有：GB2312（简体中文）、BIG5（繁体中文）、GBK（简繁体中文）和UTF-8，其中UTF-8也被成为万国码，其中包含了全世界所有国家需要用到的字符。</p><p><strong>注意：</strong> 上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用"UTF-8"编码，尽量统一写成标准的"UTF-8"，不要写成"utf8"或"UTF8"。</p><h3 id="3-4-总结">3.4 总结</h3><ol><li>以上三个代码VSCode自动生成，基本不需要我们重写。</li><li>&lt; !DOCTYPE html &gt; 文档类型声明标签，告诉浏览器这个页面采取html5版本来显示页面。</li><li>&lt; html lang=“en” &gt; 告诉浏览器或者搜索引擎这是一个英文网站，本页面采取英文来显示。</li><li>&lt; meta charset=“UTF-8” &gt; 必须写。采取UTF-8来保存文字，如果不写就会乱码，具体原理后面分析。</li></ol><h2 id="4-HTML常用标签">4. HTML常用标签</h2><h3 id="4-1-标签语义">4.1 标签语义</h3><p>学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。</p><p><strong>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</strong></p><ul><li>标题标签</li><li>段落标签</li><li>……</li></ul><h3 id="4-2-标题标签-h1-h6-（重要）">4.2 标题标签&lt;h1&gt; - &lt;h6&gt; （重要）</h3><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML提供了6个等级的网页标题，即&lt;h1&gt; - &lt;h6&gt;</p><pre class=" language-language-html"><code class="language-language-html"><h1>我是一级标题<h1></code></pre><p>单词head的缩写，意为头部、标题。<br><strong>标签语义：</strong> 作为标题使用，并且依据重要性递减。</p><p><strong>特点：</strong></p><ol><li>加了标题的文字会变的加粗，字号也会依次变大。</li><li>一个标题独占一行</li></ol><h3 id="4-3-段落和换行标签（重要）">4.3 段落和换行标签（重要）</h3><p>在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在HTML标签中，&lt;p&gt;标签用于定义段落，它可以将整个网页分为若干个段落。</p><pre class=" language-language-html"><code class="language-language-html"><p>我是一个段落标签</p></code></pre><p>单词paragraph的缩写，意为段落。<br>标签语义：可以把HTML文档分割为若干段落。</p><p><strong>特点：</strong></p><ol><li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li><li>段落和段落之间保有空隙。</li></ol><p>在HTML中，一个段落中的文字会从左到右依次排列，知道浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签<code>&lt;br /&gt;</code></p><pre class=" language-language-html"><code class="language-language-html"><br /></code></pre><p>单词break的缩写，意为打断，换行。<br><strong>标签语义：</strong> 强制换行。</p><p><strong>特点：</strong></p><ol><li>&lt; br /&gt; 是个单标签。</li><li>&lt; br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li></ol><h3 id="4-4-文本格式化标签">4.4 文本格式化标签</h3><p>在网页中， 有时需要为文字设置<strong>粗体</strong>，<em>斜体</em>或<u>下划线</u>等效果，这是就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><strong>标签语义：</strong> 突出重要性，比普通文字重要</p><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐使用<code>&lt;strong&gt;</code>标签加粗，语义更强烈</td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>标签加粗，语义更强烈</td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>标签加粗，语义更强烈</td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>标签加粗，语义更强烈</td></tr></tbody></table><p>重点记住 <strong>加粗</strong> 和 <em>倾斜</em> 。</p><h3 id="4-5-div-和-span-标签">4.5 &lt;div&gt;和&lt;span&gt;标签</h3><p>&lt;div&gt;和&lt;span&gt;是没有语义的，它们就是一个盒子，用来装内容的。</p><pre class=" language-language-html"><code class="language-language-html"><div> 这是头部 </div><span> 今日价格 </span></code></pre><p>div是division的缩写，表示分割、分区。<br>span意为跨度、跨距。</p><p><strong>特点：</strong></p><ol><li>&lt; div &gt; 标签用来布局，但是现在一行只能放一个&lt; div &gt;。=&gt;大盒子</li><li>&lt; span &gt; 标签用来布局，一行上可以多个&lt; span &gt;。=&gt;小盒子</li></ol><h3 id="4-6-图像标签和路径（重点）">4.6 图像标签和路径（重点）</h3><h4 id="4-6-1-图像标签">4.6.1 图像标签</h4><p>在HTML标签中，&lt;img&gt;标签用于定义HTML页面中的图像。</p><pre class=" language-language-html"><code class="language-language-html"><img src="图像URL" /></code></pre><p>单词image的缩写，意为图像。<br>src是&lt;img&gt;标签的<strong>必须属性</strong> ，它用于指定图像文件的路径和文件名。</p><p>图像标签的属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本。图像不能显示时展示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本。鼠标放到图像上时，显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><p>图像标签属性注意点：</p><ol><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性均采取键值对的格式，即<code>key="value"</code>的格式，属性=“属性值”。</li></ol><p><strong>重要掌握点：</strong></p><ul><li>[ ] 请说出 图像标签中 哪个属性是必须要写的？</li><li>[ ] 请说出 图像标签中 alt 和 title 属性的区别？</li></ul><h4 id="4-6-2-路径的前期铺垫知识">4.6.2 路径的前期铺垫知识</h4><ol><li>目录文件夹和根目录<ul><li>实际工作中，我们的文件不能随便乱放，否则用起来很难快速地找到他们，因此我们需要一个文件夹来管理他们。</li><li><strong>目录文件夹：</strong> 就是普通文件夹，里面只不过存放了我们做页面所需要的相关素材，比如html文件，图片等。</li><li><strong>根目录：</strong> 打开目录文件夹的第一次就是根目录。</li></ul></li><li>VSCode打开目录文件夹</li></ol><h4 id="4-6-3-路径">4.6.3 路径</h4><p>页面中的图片非常多，通常我们会新建一个文件夹来存放这些图片文件（images），这是再查找图像，就需要采用"路径"的方式来指定图像文件的位置。</p><p>路径可以分为：</p><ol><li>相对路径</li><li>绝对路径</li></ol><p><strong>相对路径：</strong> 以引用文件所在位置为参考基础，而建立出的目录路径。</p><p>这里简单来说，图片相对于HTML页面的位置。</p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级，如 &lt;img scr=“baidu.gif” /&gt;</td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件下一级，如 &lt;img src=“images/baidu.gif” /&gt;</td></tr><tr><td>上一级路径</td><td>/</td><td>图像文件位于HTML文件上一级，如 &lt;img src=“…/baidu.gif” /&gt;</td></tr></tbody></table><p>相对路径是代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级、下一级、同一级就是图片相对于HTML页面的位置。</p><p><strong>绝对路径：</strong> 是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</p><p>例如：“D:\web\img\logo.gif” 或完整的网络地址: “<a href="http://www.itcast.cn/2018czgw/images/logo2.png">http://www.itcast.cn/2018czgw/images/logo2.png</a>”。</p><h3 id="4-7-超链接标签（重点）">4.7 超链接标签（重点）</h3><p>在HTML标签中，&lt;a&gt;标签用于定义超链接，作用是从一个页面链接到另一个页面。</p><h4 id="4-7-1-链接的语法格式">4.7.1 链接的语法格式</h4><pre class=" language-language-html"><code class="language-language-html"><a href="跳转目标" target="目标窗口的弹出方式"> 文本或图片 </a></code></pre><p>单词anchor的缩写，意为：锚。</p><p>两个属性的作用如下：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址，<strong>（必须属性）</strong> 当为标签应用href属性是，它就具有了超链接的功能</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开方式</td></tr></tbody></table><h4 id="4-7-2-链接分类">4.7.2 链接分类</h4><ol><li>外部链接：常以<code>http://</code>开头。例如<code>&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;</code></li><li>内部链接：网站内部页面之间的相互链接。直接链接内部页面名称即可，例如<code>&lt;a href="index.html"&gt;首页&lt;/a&gt;</code></li><li>空链接：如果当时没有确定链接目标时，可以暂时引用空链接。<code>&lt;a href="#"&gt;首页&lt;/a&gt;</code></li><li>下载链接：如果href里面地址是一个文件或者压缩包，会下载这个文件。</li><li>网页元素链接：在网页中的各种网页元素中，如文本、图像、表格、音频、视频等都可以添加超链接。</li><li>锚点链接：点击链接，可以快速定位到页面中的某个位置。<ul><li>在链接文本的href属性中，设置属性值为 <strong>#名字</strong> 的形式，如：<code>&lt;a href="#two"&gt;第2集&lt;/a&gt;</code></li><li>找到目标位置标签，里面添加一个 <strong>id属性=刚才的名字是</strong> ，如：<code>&lt;h3 id=two&gt;第2集介绍&lt;/h3&gt;</code></li></ul></li></ol><h2 id="5-HTML中的注释和特殊字符">5. HTML中的注释和特殊字符</h2><h3 id="5-1-注释">5.1 注释</h3><p>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><p>HTML中的注释以<code>&lt;!--</code>开头，以<code>--&gt;</code>结束。</p><pre><code>&lt;!-- 注释语句 --&gt;   快捷键：Ctrl+ /</code></pre><p>注释标签里面的内容是给程序员看的，这个代码是不执行不显示到页面中的。<br>添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的。</p><h3 id="5-2-特殊字符">5.2 特殊字符</h3><p>在HTML页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td>&nbsp;</td><td>空格符</td><td>&amp;nbsp;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt;</td></tr><tr><td>&amp;</td><td>和号</td><td>&amp;amp;</td></tr><tr><td>¥</td><td>人民币</td><td>&amp;yen;</td></tr><tr><td>©</td><td>版权</td><td>&amp;copy;</td></tr><tr><td>®</td><td>注册商标</td><td>&amp;reg;</td></tr><tr><td>°</td><td>摄氏度</td><td>&amp;deg;</td></tr><tr><td>±</td><td>正负号</td><td>&amp;plusmn;</td></tr><tr><td>×</td><td>乘号</td><td>&amp;times;</td></tr><tr><td>÷</td><td>除号</td><td>&amp;divide;</td></tr><tr><td>²</td><td>平方2/上标2</td><td>&amp;sup2;</td></tr><tr><td>³</td><td>立方3/上标3</td><td>&amp;sup3;</td></tr></tbody></table><p><strong>重点记住：</strong> 空格、大于号、小于号这三个，其余使用较少，如果需要则回头查询即可。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part09-Markdown自动网址链接</title>
      <link href="/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part09-markdown-zi-dong-wang-zhi-lian-jie/"/>
      <url>/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part09-markdown-zi-dong-wang-zhi-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-20">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 自动网址链接</h1><p>许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入http://www.example.com，即使您未<a href="https://markdown.com.cn/basic-syntax/links.html">使用方括号</a>，您的Markdown处理器也会自动将其转换为链接。</p><pre><code>http://www.example.com</code></pre><p>呈现的输出如下所示：<br><a href="http://www.example.com">http://www.example.com</a></p><span id="more"></span><h2 id="禁用自动URL链接">禁用自动URL链接</h2><p>如果您不希望自动链接URL，则可以通过将URL表示为带反引号的代码来删除该链接。</p><pre><code>`http://www.example.com`</code></pre><p>呈现的输出如下所示：<br><code>http://www.example.com</code></p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part08-Markdown使用Emoji表情</title>
      <link href="/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part08-markdown-shi-yong-emoji-biao-qing/"/>
      <url>/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part08-markdown-shi-yong-emoji-biao-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-21">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 使用Emoji表情</h1><p>有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入<em>emoji shortcodes</em>。</p><h2 id="复制和粘贴表情符号">复制和粘贴表情符号</h2><p>在大多数情况下，您可以简单地从<a href="https://emojipedia.org/">Emojipedia </a>等来源复制表情符号并将其粘贴到文档中。许多Markdown应用程序会自动以Markdown格式的文本显示表情符号。从Markdown应用程序导出的HTML和PDF文件应显示表情符号。</p><span id="more"></span><p><strong>Tip</strong>: 如果您使用的是静态网站生成器，请确保将HTML页面编码为UTF-8。</p><h2 id="使用表情符号简码">使用表情符号简码</h2><p>一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p><pre><code>去露营了！ :tent: 很快回来。真好笑！ :joy:</code></pre><p>呈现的输出如下所示：</p><p>去露营了！ <span class="github-emoji"><span>⛺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 很快回来。</p><p>真好笑！ <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><strong>Note</strong>: 注意：您可以使用此<a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a>，但请记住，表情符号简码因应用程序而异。有关更多信息，请参阅Markdown应用程序的文档。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part07-Markdown任务列表语法</title>
      <link href="/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part07-markdown-ren-wu-lie-biao-yu-fa/"/>
      <url>/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part07-markdown-ren-wu-lie-biao-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-19">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 任务列表语法</h1><p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加 x 。</p><span id="more"></span><pre><code>- [x] Write the press release- [ ] Update the website- [ ] Contact the media</code></pre><p>呈现的输出如下所示：</p><ul><li>[x] Write the press release</li><li>[ ] Update the website</li><li>[ ] Contact the media</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part06-Markdown删除线</title>
      <link href="/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part06-markdown-shan-chu-xian/"/>
      <url>/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part06-markdown-shan-chu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-18">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 删除线</h1><p>您可以通过在单词中心放置一条水平线来删除单词。结果看起来<s>像这样</s>。此功能使您可以指示某些单词是一个错误，要从文档中删除。若要删除单词，请在单词前后使用两个波浪号<code>~~</code>。</p><pre><code>~~世界是平坦的。~~ 我们现在知道世界是圆的。</code></pre><p>呈现的输出如下所示：</p><p><s>世界是平坦的。</s> 我们现在知道世界是圆的。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part05-Markdown定义列表</title>
      <link href="/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part05-markdown-ding-yi-lie-biao/"/>
      <url>/2022/01/25/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part05-markdown-ding-yi-lie-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-17">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 定义列表</h1><p>一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义<em>列表</em>，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><pre><code>First Term: This is the definition of the first term.Second Term: This is one definition of the second term.: This is another definition of the second term.</code></pre><span id="more"></span><pre class=" language-language-html"><code class="language-language-html"><dl>  <dt>First Term</dt>  <dd>This is the definition of the first term.</dd>  <dt>Second Term</dt>  <dd>This is one definition of the second term. </dd>  <dd>This is another definition of the second term.</dd></dl></code></pre><p>呈现的输出如下所示：</p><p>First Term<br>: This is the definition of the first term.</p><p>Second Term<br>: This is one definition of the second term.<br>: This is another definition of the second term.</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part04-Markdown标题编号</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part04-markdown-biao-ti-bian-hao/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part04-markdown-biao-ti-bian-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-16">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 标题编号</h1><p>许多Markdown处理器支持标题的自定义ID - 一些Markdown处理器会自动添加它们。添加自定义ID允许您直接链接到标题并使用CSS对其进行修改。要添加自定义标题ID，请在与标题相同的行上用大括号括起该自定义ID。</p><pre><code>### My Great Heading custom-id</code></pre><span id="more"></span><p>HTML看起来像这样：</p><pre class=" language-language-html"><code class="language-language-html"><h3 id="custom-id">My Great Heading</h3></code></pre><p>呈现的输出如下所示：</p><h3 id="My-Great-Heading-custom-id">My Great Heading custom-id</h3><h2 id="链接到标题ID-headid">链接到标题ID (#headid)</h2><p>通过创建带有数字符号（#）和自定义标题ID的[标准链接]((/basic-syntax/links.html)，可以链接到文件中具有自定义ID的标题。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td><code>[Heading IDs](#heading-ids)</code></td><td><code>&lt;a href="#heading-ids"&gt;Heading IDs&lt;/a&gt;</code></td><td>[Heading IDs]heading-ids)</td></tr></tbody></table><p>其他网站可以通过将自定义标题ID添加到网页的完整URL（例如<code>[Heading IDs](https://markdown.com.cn/extended-syntax/heading-ids.html#headid)）</code>来链接到标题。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part03-Markdown脚注</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part03-markdown-jiao-zhu/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part03-markdown-jiao-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-15">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 脚注</h1><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。</p><p>要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]: My footnote.）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。</p><span id="more"></span><pre><code>Here's a simple footnote,[^1] and here's a longer one.[^bignote][^1]: This is the first footnote.[^bignote]: Here's one with multiple paragraphs and code.    Indent paragraphs to include them in the footnote.    `{ my code }`    Add as many paragraphs as you like.</code></pre><p>呈现的输出如下所示：</p><p>Here’s a simple footnote,[^1] and here’s a longer one.[^bignote]</p><p>[^1]: This is the first footnote.</p><p>[^bignote]: Here’s one with multiple paragraphs and code.</p><pre><code>Indent paragraphs to include them in the footnote.`{ my code }`Add as many paragraphs as you like.</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part02-Markdown围栏代码块</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part02-markdown-wei-lan-dai-ma-kuai/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part02-markdown-wei-lan-dai-ma-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-14">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 围栏代码块</h1><p>Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号（```）或三个波浪号（~~~）。</p><span id="more"></span><p>```<br>{<br>　“firstName”: “John”,<br>　“lastName”: “Smith”,<br>　“age”: 25<br>}<br>```</p><p>呈现的输出如下所示：</p><pre><code>{  "firstName": "John",  "lastName": "Smith",  "age": 25}</code></pre><h2 id="语法高亮">语法高亮</h2><p>许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。</p><p>```json<br>{<br>　“firstName”: “John”,<br>　“lastName”: “Smith”,<br>　“age”: 25<br>}<br>```</p><p>呈现的输出如下所示：</p><pre class=" language-language-json"><code class="language-language-json">{  "firstName": "John",  "lastName": "Smith",  "age": 25}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part01-Markdown表格</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part01-markdown-biao-ge/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-tuo-zhan-yu-fa/part01-markdown-biao-ge/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-13">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 表格</h1><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。</p><pre><code>| Syntax      | Description || ----------- | ----------- || Header      | Title       || Paragraph   | Text        |</code></pre><span id="more"></span><p>呈现的输出如下所示：</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p>单元格宽度可以变化，如下所示。呈现的输出将看起来相同。</p><pre><code>| Syntax | Description || --- | ----------- || Header | Title || Paragraph | Text |</code></pre><p>呈现的输出如下所示：跟上方表格相同</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p>Tip: 使用连字符和管道创建表可能很麻烦。为了加快该过程，请尝试使用<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a>。使用图形界面构建表，然后将生成的Markdown格式的文本复制到文件中。</p><h2 id="对齐">对齐</h2><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。</p><pre><code>| Syntax      | Description | Test Text     || :---        |    :----:   |          ---: || Header      | Title       | Here's this   || Paragraph   | Text        | And more      |</code></pre><p>呈现的输出如下所示：</p><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table><h2 id="格式化表格中的文字">格式化表格中的文字</h2><p>您可以在表格中设置文本格式。例如，您可以添加链接，代码（仅反引号（<code>`</code>）中的单词或短语，而不是代码块）和强调。</p><p>您不能添加标题，块引用，列表，水平规则，图像或HTML标签。</p><h2 id="在表中转义管道字符">在表中转义管道字符</h2><p>您可以使用表格的HTML字符代码（<code>&amp;#124;</code>）或者用反斜线（\）在表中显示竖线（<code>|</code>）字符。</p><pre><code>|Syntax||---||&amp;#124;||\| |</code></pre><p>呈现的输出如下所示：</p><table><thead><tr><th>Syntax</th></tr></thead><tbody><tr><td>|</td></tr><tr><td>|</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 拓展语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part12-Markdown内嵌HTML标签</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part12-markdown-nei-qian-html-biao-qian/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part12-markdown-nei-qian-html-biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-11">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 内嵌HTML标签</h1><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><h2 id="行级內联标签">行级內联标签</h2><p>HTML 的行级內联标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><span id="more"></span><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><pre><code>This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</code></pre><p>渲染效果如下：<br>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h2 id="区块标签">区块标签</h2><p>区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 &lt;p&gt; 标签。</p><p>例如，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>This is a regular paragraph.&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;This is another regular paragraph.</code></pre><p>渲染效果如下：<br>This is a regular paragraph.</p><table>    <tbody><tr>        <td>Foo</td>    </tr></tbody></table><p>This is another regular paragraph.</p><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p><h3 id="HTML-用法最佳实践">HTML 用法最佳实践</h3><p>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。</p><p>对于 HTML 的块级元素 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt; 和 &lt;p&gt;，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。</p><p>在 HTML 块级标签内不能使用 Markdown 语法。例如 &lt;p&gt;italic and **bold**&lt;/p&gt; 将不起作用。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part11-Markdown转义字符语法</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part11-markdown-zhuan-yi-zi-fu-yu-fa/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part11-markdown-zhuan-yi-zi-fu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-12">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 转义字符语法</h1><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><pre><code>\* Without the backslash, this would be a bullet in an unordered list.</code></pre><p>* Without the backslash, this would be a bullet in an unordered list.</p><span id="more"></span><h2 id="可做转义的字符">可做转义的字符</h2><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p><table><thead><tr><th>Character</th><th>Name</th></tr></thead><tbody><tr><td>\</td><td>backslash</td></tr><tr><td>`</td><td>backtick(see also <strong>escaping backticks in code</strong>)</td></tr><tr><td>*</td><td>asterisk</td></tr><tr><td>_</td><td>underscore</td></tr><tr><td>{ }</td><td>curly braces</td></tr><tr><td>[ ]</td><td>brackets</td></tr><tr><td>( )</td><td>parentheses</td></tr><tr><td>#</td><td>pound sign</td></tr><tr><td>+</td><td>plus sign</td></tr><tr><td>-</td><td>minus sign (hyphen)</td></tr><tr><td>.</td><td>dot</td></tr><tr><td>!</td><td>exclamation mark</td></tr><tr><td>|</td><td>pipe (see also <strong>escaping pipe in tables</strong>)</td></tr></tbody></table><h2 id="特殊字符自动转义">特殊字符自动转义</h2><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 <code>&amp;lt</code>; 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「<code>AT&amp;amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转成：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p><p>Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 <code>&amp;</code> 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 <code>&amp;amp;</code>。所以你如果要在文件中插入一个著作权的符号，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>渲染效果如下：<br>©</p><p>Markdown 将不会对这段文字做修改，但是如果你这样写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持 行内 HTML ，如果你使用 <code>&lt;</code> 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>需要特别注意的是，在 Markdown 的块级元素和内联元素中， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都会被自动转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML。（在 HTML 语法中，你要手动把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体。）</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part10-Markdown图片语法</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part10-markdown-tu-pian-yu-fa/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part10-markdown-tu-pian-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-10">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 图片语法</h1><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 "图片title")。</code></p><p>对应的HTML代码：<code>&lt;img src="图片链接" alt="图片alt" title="图片title"&gt;</code></p><pre><code>![这是图片](Part10-Markdown图片语法/philly-magic-garden.jpg "Magic Gardens")</code></pre><span id="more"></span><p>渲染效果如下：<br><img src="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part10-markdown-tu-pian-yu-fa/philly-magic-garden.jpg" alt="这是图片" title="Magic Gardens"></p><h2 id="链接图片">链接图片</h2><p>给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。</p><pre><code>[![沙漠中的岩石图片](Part10-Markdown图片语法/shiprock.jpg "Shiprock")](https://markdown.com.cn)</code></pre><p><a href="https://markdown.com.cn"><img src="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part10-markdown-tu-pian-yu-fa/shiprock.jpg" alt="沙漠中的岩石图片" title="Shiprock"></a></p><h2 id="图片预览正常，站内无法显示问题解决">图片预览正常，站内无法显示问题解决</h2><h3 id="问题描述">问题描述</h3><p>markdown文件中，插入图片的方式为 <code>![](文件路径)</code> ，此时markdown文件可以正常显示图片。<br>但是一上传到博客上，便不能正常显示。</p><h3 id="解决方法">解决方法</h3><ol><li><p>改 hexo 目录下的 .config.yml 文件，将 <code>post_asset_folder: false</code> 修改为 <code>post_asset_folder: true</code>。</p></li><li><p>安装一个图片路径转换的插件。在hexo文件夹下打开 Git bush。输入</p></li></ol><pre><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></pre><p><strong>注意</strong>：这是经过修改的插件代码，网上流传的另一份代码 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code> 并不能使用。</p><p>如果你之前安装了这个错误的插件，请将 <code>/node_modules/hexo-asset-image/index.js</code>这个文件替换成下面的代码：</p><pre class=" language-language-js"><code class="language-language-js">'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) {return str.split(m, i).join(m).length;}var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data){var config = hexo.config;if(config.post_asset_folder){    var link = data.permalink;if(version.length > 0 && Number(version[0]) == 3)    var beginPos = getPosition(link, '/', 1) + 1;else    var beginPos = getPosition(link, '/', 3) + 1;// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".var endPos = link.lastIndexOf('/') + 1;link = link.substring(beginPos, endPos);var toprocess = ['excerpt', 'more', 'content'];for(var i = 0; i < toprocess.length; i++){    var key = toprocess[i];    var $ = cheerio.load(data[key], {    ignoreWhitespace: false,    xmlMode: false,    lowerCaseTags: false,    decodeEntities: false    });    $('img').each(function(){    if ($(this).attr('src')){        // For windows style path, we replace '\' to '/'.        var src = $(this).attr('src').replace('\\', '/');        if(!/http[s]*.*|\/\/.*/.test(src) &&            !/^\s*\//.test(src)) {            // For "about" page, the first part of "src" can't be removed.            // In addition, to support multi-level local directory.            var linkArray = link.split('/').filter(function(elem){            return elem != '';            });            var srcArray = src.split('/').filter(function(elem){            return elem != '' && elem != '.';            });            if(srcArray.length > 1)            srcArray.shift();            src = srcArray.join('/');            $(this).attr('src', config.root + link + src);            console.info&&console.info("update link as:-->"+config.root + link + src);        }    }else{        console.info&&console.info("no src attr, skipped...");        console.info&&console.info($(this));    }    });    data[key] = $.html();}}});</code></pre><ol start="3"><li><p>安装完上述插件后，当我们创建新文章时 <code>hexo new post "new article"</code> ，就自动在 <code>new article.md</code> 文件的同目录下创建一个同名的文件夹，这里就是文件夹 <code>new article</code> 。我们把在 <code>new article.md</code> 使用的图片放入该文件夹中。</p></li><li><p>这里我们给出两种办法来引用图片。</p><ol><li><p>直接使用代码 <code>![](hexo.png)</code> （虽然没有写文件夹的名字，但是可以的），<code>hexo.png</code> 是我们存在 <code>new article</code> 文件夹内的图片。这时你会发现markdown预览中无法显示这张图片，但是当你将博客上传到网站时，网站上是可以正常显示的。</p></li><li><p>使用代码 <code>![](new article/hexo.png)</code>不仅可以本地预览，上传到网站也可以正常显示。</p></li><li><p>本地无法预览也是件很不舒服的事情，其实我们还可以另外创建一个文件夹 <code>pictures</code> ，里面专门存放所有文章的图片，代码 <code>![](pictures/hexo.png)</code> 不仅可以本地预览，上传到网站也可以正常显示。</p></li></ol></li></ol><p><strong>注意</strong>： 不管采取哪种办法，都要创建一个和md文件同名的文件夹，里面放上需要的图片。<br>如果 <strong>2和3</strong> 中代码无法实现网站上的正常显示，那就使用 <strong>1</strong> 中的代码。<br>因为 <strong>2和3</strong> 中代码我无法保证每个人都成功。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part09-Markdown链接语法</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part09-markdown-lian-jie-yu-fa/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part09-markdown-lian-jie-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-9">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 链接语法</h1><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)</p><p>对应的HTML代码：&lt;a href=“超链接地址” title=“超链接title”&gt;超链接显示名&lt;/a&gt;</p><pre><code>这是一个链接 [Markdown语法](https://markdown.com.cn)。</code></pre><span id="more"></span><p>渲染效果如下：<br>这是一个链接 <a href="https://markdown.com.cn">Markdown语法</a>。</p><h2 id="给链接增加-Title">给链接增加 Title</h2><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p><pre><code>这是一个链接 [Markdown语法](https://markdown.com.cn "最好的markdown教程")。</code></pre><p>渲染效果如下：<br>这是一个链接 <a href="https://markdown.com.cn" title="最好的markdown教程">Markdown语法</a>。</p><h2 id="网址和Email地址">网址和Email地址</h2><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><pre><code>&lt;https://markdown.com.cn&gt;&lt;fake@example.com&gt;</code></pre><p>渲染效果如下：<br><a href="https://markdown.com.cn">https://markdown.com.cn</a><br><a href="mailto:fake@example.com">fake@example.com</a></p><h2 id="带格式化的链接">带格式化的链接</h2><p>若要强调链接, 则在链接语法前后增加星号。若要将链接表示为代码，请在方括号中添加反引号。</p><pre><code>I love supporting the **[EFF](https://eff.org)**.This is the *[Markdown Guide](https://www.markdownguide.org)*.See the section on [`code`](#code).</code></pre><p>渲染效果如下：<br>I love supporting the <strong><a href="https://eff.org">EFF</a></strong>.<br>This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em>.<br>See the section on <a href="#code"><code>code</code></a>.</p><h2 id="引用类型链接">引用类型链接</h2><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p><h3 id="链接的第一部分格式">链接的第一部分格式</h3><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p><p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p><p>以下示例格式对于链接的第一部分效果相同：</p><ul><li><code>[hobbit-hole][1]</code></li><li><code>[hobbit-hole] [1]</code></li></ul><h3 id="链接的第二部分格式">链接的第二部分格式</h3><p>引用类型链接的第二部分使用以下属性设置格式：</p><ol><li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如<code>[label]: </code>）。</li><li>链接的URL，可以选择将其括在尖括号中。</li><li>链接的可选标题，可以将其括在双引号，单引号或括号中。</li></ol><p>以下示例格式对于链接的第二部分效果相同：</p><ul><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle "Hobbit lifestyles"</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle 'Hobbit lifestyles'</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; "Hobbit lifestyles"</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; 'Hobbit lifestyles'</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; (Hobbit lifestyles)</code></li></ul><p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p><h2 id="链接最佳实践">链接最佳实践</h2><p>不同的 Markdown 应用程序处理URL中间的空格方式不一样。为了兼容性，请尽量使用%20代替空格。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td><code>[link](https://www.example.com/my%20great%20page)</code></td><td><code>[link](https://www.example.com/my great page)</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part08-Markdown分隔线语法</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part08-markdown-fen-ge-xian-yu-fa/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part08-markdown-fen-ge-xian-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-7">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 分隔线语法</h1><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。</p><pre><code>***---_________________</code></pre><span id="more"></span><p>以上三个分隔线的渲染效果看起来都一样：</p><hr><h2 id="分隔线（Horizontal-Rule）用法最佳实践">分隔线（Horizontal Rule）用法最佳实践</h2><p>为了兼容性，请在分隔线的前后均添加空白行。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td>Try to put a blank line before…<br><br>—<br><br>…and after a horizontal rule.</td><td>Without blank lines, this would be a heading.<br>—<br>Don’t do this!</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part07-Markdown代码语法</title>
      <link href="/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part07-markdown-dai-ma-yu-fa/"/>
      <url>/2022/01/24/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part07-markdown-dai-ma-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-6">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 代码语法</h1><p>要将单词或短语表示为代码，请将其包裹在反引号 ( ` ) 中。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>At the command prompt, type `nano`.</td><td>At the command prompt, type &lt;code&gt;nano&lt;/code&gt;.</td><td>At the command prompt, type <code>nano</code>.</td></tr></tbody></table><span id="more"></span><h2 id="转义反引号">转义反引号</h2><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>``Use `code` in your Markdown file.``</td><td>&lt;code&gt;Use `code` in your Markdown file.&lt;/code&gt;</td><td><code>Use `code` in your Markdown file.</code></td></tr></tbody></table><h2 id="代码块-2">代码块</h2><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p><pre><code>    &lt;html&gt;      &lt;head&gt;      &lt;/head&gt;    &lt;/html&gt;</code></pre><p>渲染效果如下：</p><pre class=" language-language-html"><code class="language-language-html"><html>    <head>    </head></html></code></pre><p>Note: 要创建不用缩进的代码块，请使用<a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">围栏式代码块（fenced code blocks）</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part06-Markdown列表语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part06-markdown-lie-biao-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part06-markdown-lie-biao-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-5">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 列表语法</h1><p>可以将多个条目组织成有序或无序列表。</p><h2 id="有序列表">有序列表</h2><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p><span id="more"></span><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>1. First item<br>2. Second item<br>3. Third item<br>4. Fourth item</td><td>&lt;ol&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ol&gt;</td><td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td></tr><tr><td>1. First item<br>1. Second item<br>1. Third item<br>1. Fourth item</td><td>&lt;ol&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ol&gt;</td><td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td></tr><tr><td>1. First item<br>8. Second item<br>5. Third item<br>3. Fourth item</td><td>&lt;ol&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ol&gt;</td><td><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol></td></tr><tr><td>1. First item<br>2. Second item<br>3. Third item<br>　　1. Indented item<br>　　2. Indented item<br>4. Fourth item</td><td>&lt;ol&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item<br>&lt;ol&gt;<br>&lt;li&gt;Indented item&lt;/li&gt;<br>&lt;li&gt;Indented item&lt;/li&gt;<br>&lt;/ol&gt;<br>&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ol&gt;</td><td><ol><li>First item</li><li>Second item</li><li>Third item<ol><li>Indented item</li><li>Indented item</li></ol></li><li>Fourth item</li></ol></td></tr></tbody></table><h3 id="有序列表最佳实践">有序列表最佳实践</h3><p>CommonMark和其他一些轻量级标记语言允许您使用圆括号( ‘)’ )作为分隔符(例如，1)第一项)，但并不是所有的Markdown应用程序都支持这一点，因此从兼容性的角度来看，它不是一个很好的选择。为了兼容性，只使用句号。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td>1. First item<br>2. Second item</td><td>1) First item<br>2) Second item</td></tr></tbody></table><h2 id="无序列表">无序列表</h2><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>- First item<br>- Second item<br>- Third item<br>- Fourth item</td><td>&lt;ul&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ul&gt;</td><td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td></tr><tr><td>* First item<br>* Second item<br>* Third item<br>* Fourth item</td><td>&lt;ul&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ul&gt;</td><td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td></tr><tr><td>+ First item<br>+ Second item<br>+ Third item<br>+ Fourth item</td><td>&lt;ul&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ul&gt;</td><td><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul></td></tr><tr><td>- First item<br>- Second item<br>- Third item<br>　　- Indented item<br>　　- Indented item<br>- Fourth item</td><td>&lt;ul&gt;<br>&lt;li&gt;First item&lt;/li&gt;<br>&lt;li&gt;Second item&lt;/li&gt;<br>&lt;li&gt;Third item<br>&lt;ul&gt;<br>&lt;li&gt;Indented item&lt;/li&gt;<br>&lt;li&gt;Indented item&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/li&gt;<br>&lt;li&gt;Fourth item&lt;/li&gt;<br>&lt;/ul&gt;</td><td><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ul></td></tr></tbody></table><h3 id="无序列表的最佳实践">无序列表的最佳实践</h3><p>Markdown应用程序没有就如何处理同一列表中的不同分隔符达成一致。为了兼容性，不要在同一个列表中混合和匹配分隔符——选择一个并坚持使用它。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td>- First item<br>- Second item<br>- Third item<br>- Fourth item</td><td>+ First item<br>* Second item<br>- Third item<br>+ Fourth item</td></tr></tbody></table><h2 id="在列表中嵌套其他元素">在列表中嵌套其他元素</h2><p>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符，如下例所示：</p><h3 id="段落">段落</h3><pre><code>* This is the first list item.* Here's the second list item.    I need to add another paragraph below the second list item.* And here's the third list item.</code></pre><p>渲染效果如下：</p><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><p>I need to add another paragraph below the second list item.</p></li><li><p>And here’s the third list item.</p></li></ul><h3 id="引用块">引用块</h3><pre><code>* This is the first list item.* Here's the second list item.    &gt; A blockquote would look great below the second list item.* And here's the third list item.</code></pre><p>渲染效果如下：</p><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li><p>And here’s the third list item.</p></li></ul><h3 id="代码块">代码块</h3><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</p><pre><code>1. Open the file.2. Find the following code block on line 21:        &lt;html&gt;          &lt;head&gt;            &lt;title&gt;Test&lt;/title&gt;          &lt;/head&gt;3. Update the title to match the name of your website.</code></pre><p>渲染效果如下：</p><ol><li><p>Open the file.</p></li><li><p>Find the following code block on line 21:</p><pre><code> &lt;html&gt;   &lt;head&gt;     &lt;title&gt;Test&lt;/title&gt;   &lt;/head&gt;</code></pre></li><li><p>Update the title to match the name of your website.</p></li></ol><h3 id="图片">图片</h3><pre><code>1.  Open the file containing the Linux mascot.2.  Marvel at its beauty.    ![Picture](\..\..\..\themes\next\source\images\01.jpg)3.  Close the file.</code></pre><p>渲染效果如下：</p><ol><li><p>Open the file containing the Linux mascot.</p></li><li><p>Marvel at its beauty.</p><p><img src="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part06-markdown-lie-biao-yu-fa/......%5Cthemes%5Cnext%5Csource%5Cimages%5C01.jpg" alt="Picture"></p></li><li><p>Close the file.</p></li></ol><h3 id="列表">列表</h3><p>可以将无序列表嵌套在有序列表中，反之亦然。</p><pre><code>1. First item2. Second item3. Third item    - Indented item    - Indented item4. Fourth item</code></pre><p>渲染效果如下：</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part05-Markdown引用语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part05-markdown-yin-yong-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part05-markdown-yin-yong-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-8">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 引用语法</h1><p>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号。</p><pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.</code></pre><p>渲染效果如下所示：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><span id="more"></span><h2 id="多个段落的块引用">多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。</p><pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><p>渲染效果如下：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote><h2 id="嵌套块引用">嵌套块引用</h2><p>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。</p><pre><code>&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><p>渲染效果如下：</p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><h2 id="带有其它元素的块引用">带有其它元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p><pre><code>&gt; #### The quarterly results look great!&gt;&gt; - Revenue was off the chart.&gt; - Profits were higher than ever.&gt;&gt;  *Everything* is going according to **plan**.</code></pre><p>渲染效果如下：</p><blockquote><h4 id="The-quarterly-results-look-great">The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p><em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part04-Markdown强调语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part04-markdown-qiang-diao-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part04-markdown-qiang-diao-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-4">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 强调语法</h1><p>通过将文本设置为粗体或斜体来强调其重要性。</p><h2 id="粗体（Bold）">粗体（Bold）</h2><p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>I just love **bold text**.</td><td>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</td><td>I just love <strong>bold text</strong>.</td></tr><tr><td>I just love __bold text__.</td><td>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</td><td>I just love <strong>bold text</strong>.</td></tr><tr><td>Love**is**bold</td><td>Love&lt;strong&gt;is&lt;/strong&gt;bold</td><td>Love<strong>is</strong>bold</td></tr></tbody></table><span id="more"></span><h3 id="粗体（Bold）用法最佳实践">粗体（Bold）用法最佳实践</h3><p>Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。</p><table><thead><tr><th>Do this</th><th>Don’t do this</th></tr></thead><tbody><tr><td>Love**is**bold</td><td>Love__is__bold</td></tr></tbody></table><h2 id="斜体（Italic）">斜体（Italic）</h2><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>Italicized text is the *cat’s meow*.</td><td>Italicized text is the &lt;em&gt;cat’s meow&lt;/em&gt;.</td><td>Italicized text is the <em>cat’s meow</em>.</td></tr><tr><td>Italicized text is the _cat’s meow_.</td><td>Italicized text is the &lt;em&gt;cat’s meow&lt;/em&gt;.</td><td>Italicized text is the <em>cat’s meow</em>.</td></tr><tr><td>A*cat*meow</td><td>A&lt;em&gt;cat&lt;/em&gt;meow</td><td>A<em>cat</em>meow</td></tr></tbody></table><h3 id="斜体（Italic）用法的最佳实践">斜体（Italic）用法的最佳实践</h3><p>尽量用*标粗字体</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td>A*cat*meow</td><td>A_cat_miao</td></tr></tbody></table><h2 id="粗体（Bold）和斜体（Italic）">粗体（Bold）和斜体（Italic）</h2><p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>This text is ***really important***.</td><td>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</td><td>This text is <em><strong>really important</strong></em>.</td></tr><tr><td>This text is ___really important___.</td><td>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</td><td>This text is <em><strong>really important</strong></em>.</td></tr><tr><td>This text is __*really important*__.</td><td>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</td><td>This text is <strong><em>really important</em></strong>.</td></tr><tr><td>This text is **_really important_**.</td><td>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</td><td>This text is <strong><em>really important</em></strong>.</td></tr><tr><td>This is really***very***important text.</td><td>This is really&lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt;important text.</td><td>This is really <em><strong>very</strong></em> important text.</td></tr></tbody></table><p>###粗体（Bold）和斜体（Italic）用法的最佳实践<br>Markdown 应用程序在处理单词或短语中间添加的下划线上并不一致。为了实现兼容性，请使用星号将单词或短语的中间部分加粗并以斜体显示，以示重要。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td>This is really***very***important text.</td><td>This is really___very___important text.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part03-Markdown换行语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part03-markdown-huan-xing-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part03-markdown-huan-xing-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-3">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;br&gt;)。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>This is the first line.   <br>And this is the second line.</td><td>&lt;p&gt;This is the first line.&lt;br&gt;And this is the second line.&lt;/p&gt;</td><td>This is the first line.<br>And this is the second line.<p></p></td></tr></tbody></table><span id="more"></span><h3 id="换行（Line-Break）用法的最佳实践">换行（Line Break）用法的最佳实践</h3><p>几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为 <strong>结尾空格（trailing whitespace)</strong> 的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 &lt;br&gt; 标签。</p><p>为了兼容性，请在行尾添加“结尾空格”或 HTML 的 &lt;br&gt; 标签来实现换行。</p><p>还有两种其他方式我并不推荐使用。CommonMark 和其它几种轻量级标记语言支持在行尾添加反斜杠 () 的方式实现换行，但是并非所有 Markdown 应用程序都支持此种方式，因此从兼容性的角度来看，不推荐使用。并且至少有两种轻量级标记语言支持无须在行尾添加任何内容，只须键入回车键（return）即可实现换行。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td><p>First line with two spaces after.　　<br>And the next line.</p><p>First line with the HTML tag after.&lt;br&gt;<br>And the next line.</p></td><td><p>First line with a backslash after.\<br>And the next line.</p><p>First line with nothing after.<br>And the next line.</p></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part02-Markdown段落语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part02-markdown-duan-luo-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part02-markdown-duan-luo-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 段落</h1><p>要创建段落，请使用空白行将一行或多行文本进行分隔。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>I really like using Markdown.<br><br>I think I’ll use it to format all of my documents from now on.</td><td>&lt;p&gt;I really like using Markdown.&lt;/p&gt;<br><br>&lt;p&gt;I think I’ll use it to format all of my documents from now on.&lt;/p&gt;</td><td><p>I really like using Markdown.</p><p>I think I’ll use it to format all of my documents from now on.</p></td></tr></tbody></table><span id="more"></span><h3 id="段落（Paragraph）用法的最佳实践">段落（Paragraph）用法的最佳实践</h3><p>不要用空格（spaces）或制表符（ tabs）缩进段落。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td><p>Don’t put tabs or spaces in front of your paragraphs.</p><br><p>Keep lines left-aligned like this.</p></td><td><p>0000This can result in unexpected formatting problems.</p><br><p>0000Don’t add tabs or spaces in front of paragraphs.</p><br><p>用0表示空格</p></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part01-Markdown标题语法</title>
      <link href="/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part01-markdown-biao-ti-yu-fa/"/>
      <url>/2022/01/23/markdown-guan-fang-jiao-cheng-ji-ben-yu-fa/part01-markdown-biao-ti-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-2">前言</h2><blockquote><p>本文转自<a href="https://markdown.com.cn/">Markdown官方教程</a>, 本人仅用于练习Markdown语法, 无其他商业等用途, 若有侵权, 请联系作者删除</p></blockquote><h1>Markdown 标题语法</h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (&lt;h3&gt;) (例如：### My Header)。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td># Heading level 1</td><td>&lt;h1&gt;Heading level 1&lt;/h1&gt;</td><td><h1>Heading level 1</h1></td></tr><tr><td>## Heading level 2</td><td>&lt;h2&gt;Heading level 1&lt;/h1&gt;</td><td><h2>Heading level 2</h2></td></tr><tr><td>### Heading level 3</td><td>&lt;h3&gt;Heading level 1&lt;/h1&gt;</td><td><h3>Heading level 3</h3></td></tr><tr><td>#### Heading level 4</td><td>&lt;h4&gt;Heading level 1&lt;/h1&gt;</td><td><h4>Heading level 4</h4></td></tr><tr><td>##### Heading level 5</td><td>&lt;h5&gt;Heading level 1&lt;/h1&gt;</td><td><h5>Heading level 5</h5></td></tr><tr><td>###### Heading level 6</td><td>&lt;h6&gt;Heading level 1&lt;/h1&gt;</td><td><h6>Heading level 6</h6></td></tr></tbody></table><span id="more"></span><h2 id="可选语法">可选语法</h2><p>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 – 号来标识二级标题。</p><table><thead><tr><th>Markdown语法</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>Heading level 1<br>============</td><td>&lt;h1&gt;Heading level 1&lt;/h1&gt;</td><td><h1>Heading level 1</h1></td></tr><tr><td>Heading level 2<br>------------</td><td>&lt;h2&gt;Heading level 1&lt;/h2&gt;</td><td><h2>Heading level 1</h2></td></tr></tbody></table><h3 id="最佳实践">最佳实践</h3><p>不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，请用一个空格在 # 和标题之间进行分隔。</p><table><thead><tr><th><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Do this</th><th><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Don’t do this</th></tr></thead><tbody><tr><td># Here’s a heading</td><td>#Here’s a heading</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown官方教程 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
